scale_y_continuous(breaks = NULL)
freccm.plot <- ggplot(data = no_cat_cen, aes(frec_card_max)) +
geom_density(color = "deepskyblue4", fill = "deepskyblue4", alpha = 0.5) +
blank_theme() +
labs(subtitle = "frec_card_max escalada",
caption = "Datos: heart.csv",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
deprst.plot <- ggplot(data = no_cat_cen, aes(depresion_ST)) +
geom_density(color = "deepskyblue4", fill = "deepskyblue4", alpha = 0.5) +
blank_theme() +
labs(subtitle = "depresion_ST escalada",
caption = "Datos: heart.csv",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
grid.arrange(psangr.plot, colsue.plot, freccm.plot, deprst.plot)
# Código
no_cat_enf <- data.frame(no_cat, enfermedad = heart$enfermedad)
model <- lm(.~enfermedad, data = no_cat_enf)
model <- lm(.~enfermedad, data = as.matrix(no_cat_enf))
model <- lm(as.matrix(.)~enfermedad, data = no_cat_enf)
model <- lm(as.matrix(no_cat_enf[,1:4])~no_cat_enf$enfermedad)
Manova(model, test.statistic = "Wilks")
res.man <- manova(as.matrix((no_cat_enf[,1:4])~no_cat_enf$enfermedad)
res.man <- manova(as.matrix((no_cat_enf[,1:4])~no_cat_enf$enfermedad))
res.man <- manova(as.matrix(no_cat_enf[,1:4])~no_cat_enf$enfermedad)
res.man
summary(res.man)
summary.aov(res.man)
summary(res.man)
no_cat_enf$enfermedad
res.man <- manova(as.matrix(no_cat_enf[,1:4])~as.factor(no_cat_enf$enfermedad))
summary(res.man)
summary.aov(res.man)
res.man <- manova(as.matrix(no_cat_enf[,1:4])~as.factor(no_cat_enf$enfermedad))
summary(res.man)
summary.aov(res.man)
model <- lm(as.matrix(no_cat_enf[,1:4])~as.factor(no_cat_enf$enfermedad))
man.mod <- Manova(model, test.statistic = "Wilks")
man.mod
summary.manova(res.man, test = "Wilks")
# Código
no_cat_enf <- data.frame(no_cat, enfermedad = heart$enfermedad)
res.man <- manova(as.matrix(no_cat_enf[,1:4])~as.factor(no_cat_enf$enfermedad))
summary.manova(res.man, test = "Wilks")
summary.aov(res.man)
# Código
no_cat_enf <- data.frame(no_cat, enfermedad = heart$enfermedad)
res.man <- manova(as.matrix(no_cat_enf[,1:4])~as.factor(no_cat_enf$enfermedad))
summary.manova(res.man, test = "Wilks")
summary.aov(res.man)
# Código
nc.enf <- data.frame(no_cat, enfermedad = heart$enfermedad)
res.man <- manova(as.matrix(nc.enf[,1:4])~as.factor(nc.enf$enfermedad))
summary.manova(res.man, test = "Wilks")
summary.aov(res.man)
library(vegan)
dist.mat <- vegdist(nc.enf[,1:4], method = "euclidean")
grps <- nc.enf$enfermedad
adonis2(dist.mat~nc.enf$p_sang_reposo * nc.enf$col_suero * nc.enf$frec_card_max * nc.enf$depresion_ST, nc.enf$enfermedad, data = grps, permutations = 999)
library(vegan)
dist.mat <- vegdist(nc.enf[,1:4], method = "euclidean")
grps <- nc.enf$enfermedad
adonis2(dist.mat~nc.enf$p_sang_reposo * nc.enf$col_suero * nc.enf$frec_card_max * nc.enf$depresion_ST, as.factor(nc.enf$enfermedad), data = grps, permutations = 999)
library(vegan)
dist.mat <- vegdist(nc.enf[,1:4], method = "euclidean")
grps <-as.factor(nc.enf$enfermedad)
adonis2(dist.mat~nc.enf$p_sang_reposo * nc.enf$col_suero * nc.enf$frec_card_max * nc.enf$depresion_ST, data = grps, permutations = 999)
0.01*15
# Código
iris.mds <- metaMDS(dist.mat, distance = "euclidean", k = 2, trace = F)
mds.dims <- data.frame(NMDS1 = iris.mds$points[,1], NMDS2 = iris.mds$points[,2])
mds.plot.data <- cbind(mds.dims, iris)
# Código
iris.mds <- metaMDS(dist.mat, distance = "euclidean", k = 2, trace = F)
mds.dims <- data.frame(NMDS1 = iris.mds$points[,1], NMDS2 = iris.mds$points[,2])
mds.plot.data <- cbind(mds.dims, nc.enf)
# Extraemos las correlaciones de cada factor con cada dimensión reducida (flechas)
fit <- envfit(iris.mds, nc.enf)
arrow <- data.frame(fit$vectors$arrows, R = fit$vectors$r, P = fit$vectors$pvals)
arrow["Variable"] <- rownames(arrow)
arrow.p <-subset(arrow, P <= 0.05)
mds.plot <- ggplot(mds.plot.data, aes(NMDS1, NMDS2)) +
geom_point(aes(color = Species), alpha = 0.7) +
stat_ellipse(aes(fill = Species), type = "t", size = 1, geom = "polygon", alpha = 0.2) +
labs(title = "Escalamiento Multidimensional no métrico (NMDS)",
subtitle = paste('Estrés =',round(iris.mds$stress,3)),
caption = "Datos: Iris") +
blank_theme() + theme(legend.position = "right") +
geom_segment(data = arrow.p,
aes(x=0, y=0, xend = NMDS1, yend = NMDS2, lty = Variable),
arrow = arrow(length = unit(.2, "cm")*arrow.p$R) #Flechas escaladas según su R^2
)
mds.plot
# Código
iris.mds <- metaMDS(dist.mat, distance = "euclidean", k = 2, trace = F)
mds.dims <- data.frame(NMDS1 = iris.mds$points[,1], NMDS2 = iris.mds$points[,2])
mds.plot.data <- cbind(mds.dims, nc.enf)
# Extraemos las correlaciones de cada factor con cada dimensión reducida (flechas)
fit <- envfit(iris.mds, nc.enf)
arrow <- data.frame(fit$vectors$arrows, R = fit$vectors$r, P = fit$vectors$pvals)
arrow["Variable"] <- rownames(arrow)
arrow.p <-subset(arrow, P <= 0.05)
mds.plot <- ggplot(mds.plot.data, aes(NMDS1, NMDS2)) +
geom_point(aes(color = enfermedad), alpha = 0.7) +
stat_ellipse(aes(fill = enfermedad), type = "t", size = 1, geom = "polygon", alpha = 0.2) +
labs(title = "Escalamiento Multidimensional no métrico (NMDS)",
subtitle = paste('Estrés =',round(iris.mds$stress,3)),
caption = "Datos: Iris") +
blank_theme() + theme(legend.position = "right") +
geom_segment(data = arrow.p,
aes(x=0, y=0, xend = NMDS1, yend = NMDS2, lty = Variable),
arrow = arrow(length = unit(.2, "cm")*arrow.p$R) #Flechas escaladas según su R^2
)
mds.plot
# Código
iris.mds <- metaMDS(dist.mat, distance = "euclidean", k = 2, trace = F)
mds.dims <- data.frame(NMDS1 = iris.mds$points[,1], NMDS2 = iris.mds$points[,2])
mds.plot.data <- cbind(mds.dims, nc.enf)
# Extraemos las correlaciones de cada factor con cada dimensión reducida (flechas)
fit <- envfit(iris.mds, nc.enf)
arrow <- data.frame(fit$vectors$arrows, R = fit$vectors$r, P = fit$vectors$pvals)
arrow["Variable"] <- rownames(arrow)
arrow.p <-subset(arrow, P <= 0.05)
mds.plot <- ggplot(mds.plot.data, aes(NMDS1, NMDS2)) +
geom_point(aes(color = as.factor(enfermedad)), alpha = 0.7) +
stat_ellipse(aes(fill = as.factor(enfermedad)), type = "t", size = 1, geom = "polygon", alpha = 0.2) +
labs(title = "Escalamiento Multidimensional no métrico (NMDS)",
subtitle = paste('Estrés =',round(iris.mds$stress,3)),
caption = "Datos: Iris") +
blank_theme() + theme(legend.position = "right") +
geom_segment(data = arrow.p,
aes(x=0, y=0, xend = NMDS1, yend = NMDS2, lty = Variable),
arrow = arrow(length = unit(.2, "cm")*arrow.p$R) #Flechas escaladas según su R^2
)
mds.plot
mds.plot <- ggplot(mds.plot.data, aes(NMDS1, NMDS2)) +
geom_point(aes(color = as.factor(enfermedad)), alpha = 0.7) +
stat_ellipse(aes(fill = as.factor(enfermedad)), type = "t", size = 1, geom = "polygon", alpha = 0.2) +
labs(title = "Escalamiento Multidimensional no métrico (NMDS)",
subtitle = paste('Estrés =',round(iris.mds$stress,3)),
caption = "Datos: heart.csv") +
blank_theme() + theme(legend.position = "right") +
geom_segment(data = arrow.p,
aes(x=0, y=0, xend = NMDS1, yend = NMDS2, lty = Variable),
arrow = arrow(length = unit(.2, "cm")*arrow.p$R) #Flechas escaladas según su R^2
)
mds.plot
?labs
# Código
iris.mds <- metaMDS(dist.mat, distance = "euclidean", k = 2, trace = F)
mds.dims <- data.frame(NMDS1 = iris.mds$points[,1], NMDS2 = iris.mds$points[,2])
mds.plot.data <- cbind(mds.dims, nc.enf)
# Extraemos las correlaciones de cada factor con cada dimensión reducida (flechas)
fit <- envfit(iris.mds, nc.enf)
arrow <- data.frame(fit$vectors$arrows, R = fit$vectors$r, P = fit$vectors$pvals)
arrow["Variable"] <- rownames(arrow)
arrow.p <-subset(arrow, P <= 0.05)
mds.plot <- ggplot(mds.plot.data, aes(NMDS1, NMDS2)) +
geom_point(aes(color = as.factor(enfermedad)), alpha = 0.7) +
stat_ellipse(aes(fill = as.factor(enfermedad)), type = "t", size = 1, geom = "polygon", alpha = 0.2) +
labs(title = "Escalamiento Multidimensional no métrico (NMDS)",
subtitle = paste('Estrés =',round(iris.mds$stress,3)),
caption = "Datos: heart.csv") +
blank_theme() + theme(legend.position = "right") +
geom_segment(data = arrow.p,
aes(x=0, y=0, xend = NMDS1, yend = NMDS2, lty = Variable),
arrow = arrow(length = unit(.2, "cm")) #Flechas escaladas según su R^2
)
mds.plot
library(GGally)
coord.plot <- ggparcoord(nc.enf,
columns = 1:4,
groupColumn = 5,
showPoints = T,
scale = "std",
order = "anyClass",
alphaLines = 0.5) +
blank_theme(1/1.61) +
labs(title = "Gráfico de coordenadas paralelas",
subtitle = "Valores escalados",
y = element_blank(),
x = element_blank(),
caption = "Datos: Iris")
nc.enf
# Código
nc.enf <- data.frame(no_cat, enfermedad = as.factor(heart$enfermedad))
res.man <- manova(as.matrix(nc.enf[,1:4])~as.factor(nc.enf$enfermedad))
summary.manova(res.man, test = "Wilks")
summary.aov(res.man)
library(vegan)
dist.mat <- vegdist(nc.enf[,1:4], method = "euclidean")
grps <-as.factor(nc.enf$enfermedad)
adonis2(dist.mat~nc.enf$p_sang_reposo * nc.enf$col_suero * nc.enf$frec_card_max * nc.enf$depresion_ST, data = grps, permutations = 999)
library(GGally)
coord.plot <- ggparcoord(nc.enf,
columns = 1:4,
groupColumn = 5,
showPoints = T,
scale = "std",
order = "anyClass",
alphaLines = 0.5) +
blank_theme(1/1.61) +
labs(title = "Gráfico de coordenadas paralelas",
subtitle = "Valores escalados",
y = element_blank(),
x = element_blank(),
caption = "Datos: Iris")
coord.plot
library(GGally)
coord.plot <- ggparcoord(nc.enf,
columns = 1:4,
groupColumn = 5,
showPoints = T,
scale = "std",
order = "anyClass",
alphaLines = 0.5) +
blank_theme(1/1.61) +
labs(title = "Gráfico de coordenadas paralelas",
subtitle = "Valores escalados",
y = element_blank(),
x = element_blank(),
caption = "Datos: heart.csv") +
theme(legend.position = "right")
coord.plot
0.001/4
0.05/4
library(vegan)
dist.mat <- vegdist(nc.enf[,1:4], method = "euclidean")
grps <-as.factor(nc.enf$enfermedad)
adonis2(dist.mat~nc.enf$p_sang_reposo + nc.enf$col_suero + nc.enf$frec_card_max * nc.enf$depresion_ST, data = grps, permutations = 999)
library(vegan)
dist.mat <- vegdist(nc.enf[,1:4], method = "euclidean")
grps <-as.factor(nc.enf$enfermedad)
adonis2(dist.mat~nc.enf$p_sang_reposo + nc.enf$col_suero + nc.enf$frec_card_max + nc.enf$depresion_ST, data = grps, permutations = 999)
0.001*4
0.05/4
# Código
rlm <- lm(p_sang_reposo~., data = no_cat_enf)
# Código
rlm <- lm(p_sang_reposo~., data = no_cat_enf)
summary(rlm)
# Código
rlm <- lm(p_sang_reposo~., data = no_cat_cen)
summary(rlm)
# Código
rlm <- lm(p_sang_reposo~., data = no_cat_cen)
summary(rlm)
coef(rlm)
# Código
rlm <- lm(frec_card_max~., data = no_cat_cen)
summary(rlm)
coef(rlm)
# Código
rlm <- lm(frec_card_max~., data = no_cat_cen)
summary(rlm)
# Código
rlm <- lm(frec_card_max~., data = no_cat_cen)
sum.rlm <- summary(rlm)
sum.rlm
# Código
coef.df <- data.frame(coef = sum.rlm$coefficients)
coef.df
# Código
coef.df <- data.frame(coef = sum.rlm$coefficients[,1])
coef.df
# Código
coef.df <- data.frame(coef = sum.rlm$coefficients)
coef.df
# Código
coef.df <- data.frame(coef = sum.rlm$coefficients[,1], p = sum.rlm$coefficients[,4])
coef.df
# Código
coef.df <- data.frame(coef = sum.rlm$coefficients[,1], p = round(sum.rlm$coefficients[,4], 2))
coef.df
sum.rlm$fstatistic
nc.enf
# Código
rlm <- lm(frec_card_max~., data = no_cat)
sum.rlm <- summary(rlm)
sum.rlm
no_cat
# Código
rlm <- lm(frec_card_max~., data = no_cat_cen)
sum.rlm <- summary(rlm)
sum.rlm
# Código
library(caTools)
set.seed(111)
samples <- sample.split(nc.enf$enfermedad, SplitRatio = 0.75)
train <- subset(nc.enf, samples == TRUE)
test <- subset(nc.enf, samples == FALSE)
# Código
library(caTools)
set.seed(111)
nc.enf.ad <- data.frame(no_cat, nc.enf$enfermedad)
samples <- sample.split(nc.enf.ad$enfermedad, SplitRatio = 0.75)
# Código
library(caTools)
set.seed(111)
nc.enf.ad <- data.frame(no_cat, nc.enf$enfermedad)
samples <- sample.split(nc.enf.ad$enfermedad, SplitRatio = 0.75)
# Código
library(caTools)
set.seed(111)
nc.enf.ad <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
samples <- sample.split(nc.enf.ad$enfermedad, SplitRatio = 0.75)
train <- subset(nc.enf.ad, samples == TRUE)
test <- subset(nc.enf.ad, samples == FALSE)
mod.lda
# LDA
mod.lda <- lda(enfermedad~., data = train.t)
# Código
library(MASS)
set.seed(111)
# División entrenamiento-prueba
nc.enf.ad <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
samples <- sample.split(nc.enf.ad$enfermedad, SplitRatio = 0.75)
train <- subset(nc.enf.ad, samples == TRUE)
test <- subset(nc.enf.ad, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
# Código
library(MASS)
library(caret)
set.seed(111)
# División entrenamiento-prueba
nc.enf.ad <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
samples <- sample.split(nc.enf.ad$enfermedad, SplitRatio = 0.75)
train <- subset(nc.enf.ad, samples == TRUE)
test <- subset(nc.enf.ad, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
train.t <- predict(pre.pars, train)
test.t <- predict(pre.pars, test)
# LDA
mod.lda <- lda(enfermedad~., data = train.t)
mod.lda
confusionMatrix(mod.lda, predict(test.t)$class)
confusionMatrix(mod.lda, test.t$enfermedad)
levels(test.t$enfermedad)
train.t$enfermedad
# Código
library(MASS)
library(caret)
set.seed(111)
# División entrenamiento-prueba
nc.enf.ad <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
samples <- sample.split(nc.enf.ad$enfermedad, SplitRatio = 0.75)
train <- subset(nc.enf.ad, samples == TRUE)
test <- subset(nc.enf.ad, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
train.t <- predict(pre.pars, train)
test.t <- predict(pre.pars, test)
# LDA
mod.lda <- lda(enfermedad~., data = train.t)
mod.lda
confusionMatrix(mod.lda, test.t$enfermedad)
confusionMatrix(predict(mod.lda, test.t)$class, test.t$enfermedad)
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
train.t <- predict(pre.pars, train)
test.t <- predict(pre.pars, test)
# LDA
mod.lda.cod <- lda(enfermedad~., data = train.t)
mod.lda.cod
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
train.t <- predict(pre.pars, train)
test.t <- predict(pre.pars, test)
# LDA
mod.lda.cod <- lda(enfermedad~., data = train.t)
mod.lda.cod
# matriz de confusión
confusionMatrix(predict(mod.lda.cod, test.t)$class, test.t$enfermedad)
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
train.t <- predict(pre.pars, train)
test.t <- predict(pre.pars, test)
# LDA
mod.lda.cod <- lda(enfermedad~., data = train.t)
mod.lda.cod
# matriz de confusión
confusionMatrix(predict(mod.lda.cod, test.t)$class, test.t$enfermedad)
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
train.t <- predict(pre.pars, train)
test.t <- predict(pre.pars, test)
# LDA
mod.lda.cod <- lda(enfermedad~., data = train.t)
mod.lda.cod
# Matriz de confusión:
# matriz de confusión
confusionMatrix(predict(mod.lda.cod, test.t)$class, test.t$enfermedad)
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train, method = c("center", "scale"))
train.t <- predict(pre.pars, train)
test.t <- predict(pre.pars, test[,1:4])
test
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train[,1:4], method = c("center", "scale"))
train.t <- predict(pre.pars, train[,1:4])
test.t <- predict(pre.pars, test[,1:4])
# LDA
mod.lda.cod <- lda(enfermedad~., data = train.t)
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train[,1:4], method = c("center", "scale"))
train.t <- predict(pre.pars, train[,1:4])
y_train <- train$
test.t <- predict(pre.pars, test[,1:4])
nc.cod <- data.frame(no_cat, enfermedad = nc.enf$enfermedad)
nc.cod$enfermedad <- ifelse(nc.cod$enfermedad == 0, 0, 1)
# División entrenamiento-prueba
samples <- sample.split(nc.cod$enfermedad, SplitRatio = 0.75)
train <- subset(nc.cod, samples == TRUE)
test <- subset(nc.cod, samples == FALSE)
# Centrado y estandarizado de los datos
pre.pars <- preProcess(train[,1:4], method = c("center", "scale"))
train.t <- predict(pre.pars, train[,1:4])
test.t <- predict(pre.pars, test[,1:4])
# LDA
mod.lda.cod <- lda(train$enfermedad~., data = train.t)
mod.lda.cod
# Matriz de confusión:
# matriz de confusión
confusionMatrix(predict(mod.lda.cod, test.t)$class, test$enfermedad)
predict(mod.lda.cod, test.t)$class
test$enfermedad
# Matriz de confusión:
# matriz de confusión
confusionMatrix(predict(mod.lda.cod, test.t)$class, as.factor(test$enfermedad))
?confusionMatrix
# Matriz de confusión:
# matriz de confusión
confusionMatrix(predict(mod.lda.cod, test.t)$class, as.factor(test$enfermedad), positive = "1")
confusionMatrix(mod.lda.cod)
confusionMatrix(predict(mod.lda.cod, train.t), as.factor(train$enfermedad))
confusionMatrix(predict(mod.lda.cod, train.t)$class, as.factor(train$enfermedad))
confusionMatrix(predict(mod.lda.cod, train.t)$class, as.factor(train$enfermedad), positive = 1)
confusionMatrix(predict(mod.lda.cod, train.t)$class, as.factor(train$enfermedad), positive = "1")
plot(mod.lda.cod)
# Tu código va aquí
# Entrenamiento-Prueba
library(caTools)
set.seed(111)
samples <- sample.split(no_cat$frec_card_max, SplitRatio = 0.75)
train <- subset(no_cat, samples == TRUE)
test <- subset(no_cat, samples == FALSE)
# Ajuste del modelo lineal simple:
rls <- lm(frec_card_max~depresion_ST, data = train)
summary(rls)
conf.plot.reg1 <- ggplot(data = train, aes(x = depresion_ST, y = frec_card_max)) +
geom_point(color = "deepskyblue4", alpha = 0.4, size = 2) +
geom_smooth(method = lm, colour = rgb(118,78,144, maxColorValue = 255)) +
labs(title = "Regresión lineal simple de frec_card_max con respecto a depresion_ST",
caption = "Datos: heart.csv. El área gris representa el intervalo de confianza de la regresión al 95%",
subtitle = paste("Modelo ajustado: v2 = ",
round(rls$coefficients[1],2),
" + ",
round(rls$coefficients[2],2),
"*v1 + e"),
x = element_blank(),
y = element_blank()) +
blank_theme()
conf.plot.reg1
