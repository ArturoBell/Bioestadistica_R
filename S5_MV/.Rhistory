colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
)
hsd.plot
mod.HSD <- TukeyHSD(disp.mv)
mod.HSD <- data.frame(mod.HSD$group, comp = dimnames(mod.HSD$group)[[1]])
mod.HSD
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e intervalos de confianza",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = p.adj),
stat = "identity",
nudge_y = 15, colour = "gray50")
hsd.plot
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e intervalos de confianza",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = p.adj, y = 0),
stat = "identity",
nudge_y = 15, colour = "gray50")
hsd.plot
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e intervalos de confianza",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = p.adj, y = 0),
stat = "identity",
nudge_y = 0, colour = "gray50")
hsd.plot
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e intervalos de confianza",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = p.adj, y = 0),
stat = "identity",
nudge_y = min(mod.HSD$lwr)-0.005, colour = "gray50")
hsd.plot
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e intervalos de confianza",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = round(p.adj,2), y = 0),
stat = "identity",
nudge_y = min(mod.HSD$lwr)-0.005, colour = "gray50")
hsd.plot
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e intervalos de confianza",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = paste("p = ", round(p.adj,2)), y = 0),
stat = "identity",
nudge_y = min(mod.HSD$lwr)-0.005, colour = "gray50")
hsd.plot
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e intervalos de confianza",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = paste("p = ", round(p.adj,2)), y = 0),
stat = "identity",
nudge_y = max(mod.HSD$upr)+0.005, colour = "gray50")
hsd.plot
cairo_pdf("hsdplot.pdf", height = 4, width = 4*1.61, family = "Montserrat")
hsd.plot
dev.off()
hsd.plot <- ggplot(data = mod.HSD,
aes(x = comp)) +
geom_point(aes(y = diff),
colour = "deepskyblue4",
size = 4,
alpha = 0.7)+
geom_errorbar(aes(ymin = lwr, ymax = upr),
colour = "deepskyblue4") +
blank_theme() +
labs(title = "Diferencias en dispersión multivariada e IC",
subtitle = "Prueba HSD de Tukey",
x = "Grupos",
y = element_blank()) +
scale_y_continuous(breaks = NULL) +
geom_hline(yintercept = 0, colour = rgb(118,78,144, maxColorValue = 255), linetype = "dashed") +
annotate("text",
x = 0.5, y = 0+0.005,
label = as.character(0),
colour = rgb(118,78,144, maxColorValue = 255)
) +
geom_hline(yintercept = max(mod.HSD$upr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = max(mod.HSD$upr)-0.005,
label = as.character(round(max(mod.HSD$upr),2)),
colour = "firebrick"
) +
geom_hline(yintercept = min(mod.HSD$lwr), colour = "firebrick", alpha = 0.7, linetype = "dashed") +
annotate("text",
x = 0.5, y = min(mod.HSD$lwr)-0.005,
label = as.character(round(min(mod.HSD$lwr),2)),
colour = "firebrick"
) +
geom_text(aes(label = paste("p = ", round(p.adj,2)), y = 0),
stat = "identity",
nudge_y = max(mod.HSD$upr)+0.005, colour = "gray50")
hsd.plot
cairo_pdf("hsdplot.pdf", height = 4, width = 4*1.61, family = "Montserrat")
hsd.plot
dev.off()
df <- read.csv(file.choose())
hist(df$iso1)
hist(log(df$iso1)+1)
hist(scale(df$iso1))
df <- data.frame(crudos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
hist(df$crudos)
ggplot(df$crudos) + geom_density()
ggplot(df, aes(crudos)) + geom_density()
df <- data.frame(crudos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
kdeplots <- ggplot(data = df, aes(crudos)) +
geom_density() +
blank_theme() +
labs(title = "Conteo de peces",
subtitle = "Gráfico de densidad con datos originales",
caption = "Datos: http://bit.ly/comm_transf",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
kdeplots
df <- data.frame(crudos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
kdeplots <- ggplot(data = df, aes(crudos)) +
geom_density() +
blank_theme() +
labs(title = "Conteo de peces",
subtitle = "Gráfico de densidad con datos originales",
caption = "Datos: http://bit.ly/comm_transf",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
kdeplots
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
df["transf"] <- "crudos"
kdeplots <- ggplot(data = df, aes(datos, color = transf)) +
geom_density() +
blank_theme() +
facet_wrap(~trasnf) +
labs(title = "Conteo de peces",
subtitle = "Gráfico de densidad con datos originales",
caption = "Datos: http://bit.ly/comm_transf",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
kdeplots
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
df["transf"] <- "crudos"
kdeplots <- ggplot(data = df, aes(datos, color = transf)) +
geom_density() +
blank_theme() +
labs(title = "Conteo de peces",
subtitle = "Gráfico de densidad con datos originales",
caption = "Datos: http://bit.ly/comm_transf",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
kdeplots
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
df["transf"] <- "crudos"
kdeplots <- function(data, aes){
kdeplots <- ggplot(data = df, aes) +
geom_density() +
blank_theme() +
labs(title = "Conteo de peces",
subtitle = "Gráfico de densidad con datos originales",
caption = "Datos: http://bit.ly/comm_transf",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
return(kdeplots)
}
kde.plots <- kdeplots(df, aes(datos, color = transf))
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
df["transf"] <- "crudos"
kdeplots <- function(data, aes){
kdeplots <- ggplot(data = df, aes) +
geom_density() +
blank_theme() +
labs(title = "Conteo de peces",
subtitle = "Gráfico de densidad con datos originales",
caption = "Datos: http://bit.ly/comm_transf",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
return(kdeplots)
}
kde.plots <- kdeplots(df, aes(datos, color = transf))
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
df["transf"] <- "crudos"
kde.plots <- kdeplots(df, aes(datos, color = transf))
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43))
df["transf"] <- "crudos"
kde.plots <- kdeplots(df, aes(datos, color = transf))
kde.plots
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43), transf = "crudos")
kde.plots <- kdeplots(df, aes(datos, color = transf))
kde.plots
df2 <- rbind(df, data.frame(datos = log(df$datos+1), transf = "log(x+1)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf)
kde.plots
df2 <- rbind(df, data.frame(datos = log(df$datos)+1, transf = "log(x+1)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf)
kde.plots
df2
# Función de graficado
kdeplots <- function(data, aes){
kdeplots <- ggplot(data, aes) +
geom_density() +
blank_theme() +
labs(title = "Conteo de peces",
subtitle = "Gráfico de densidad con datos originales",
caption = "Datos: http://bit.ly/comm_transf",
x = element_blank(),
y = element_blank()) +
scale_y_continuous(breaks = NULL)
return(kdeplots)
}
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43), transf = "crudos")
kde.plots <- kdeplots(df, aes(datos, color = transf))
kde.plots
df2 <- rbind(df, data.frame(datos = log(df$datos)+1, transf = "log(x+1)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf)
kde.plots
?facet_wrap
df2 <- rbind(df, data.frame(datos = log(df$datos)+1, transf = "log(x+1)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df, data.frame(datos = (df$datos-mean(df$datos))/sd(df$datos), transf = "(xi-mean(x))/sd(x)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df, data.frame(datos = (df$datos-mean(df$datos))/sd(df$datos), transf = "(xi-mean(x))/sd(x)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df, data.frame(datos = (df$datos-mean(df$datos))/sd(df$datos), transf = "Z"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df2, data.frame(datos = log(df$datos)+1, transf = "log(x+1)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df2, data.frame(datos = log(df$datos), transf = "log(x)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43), transf = "crudos")
kde.plots <- kdeplots(df, aes(datos, color = transf))
kde.plots
df2 <- rbind(df, data.frame(datos = (df$datos-mean(df$datos))/sd(df$datos), transf = "Z"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df2, data.frame(datos = log(df$datos), transf = "log(x)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df2, data.frame(datos = sqrt(df$datos), transf = "sqrt(x)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df <- data.frame(datos = c(38, 1, 13, 2, 13, 20, 150, 9, 28, 6, 4, 43), transf = "originales")
kde.plots <- kdeplots(df, aes(datos, color = transf))
kde.plots
df2 <- rbind(df, data.frame(datos = (df$datos-mean(df$datos))/sd(df$datos), transf = "Z"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df2, data.frame(datos = log(df$datos), transf = "log(x)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
df2 <- rbind(df2, data.frame(datos = sqrt(df$datos), transf = "sqrt(x)"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
?boxcox
library(MASS)
df2 <- rbind(df2, data.frame(datos = boxcox(df$datos), transf = "Box-Cox"))
df$datos
library(MASS)
df2 <- rbind(df2, data.frame(datos = df$datos, transf = "Box-Cox"))
kde.plots <- kdeplots(df2, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
library(MASS)
df2 <- rbind(df2, data.frame(datos = boxcox(df$datos), transf = "Box-Cox"))
library(MASS)
df2 <- rbind(df2, data.frame(datos = boxcox(x = df$datos), transf = "Box-Cox"))
library(MASS)
df3 <- data.frame(df, id = 1:length(df$datos))
reglin <- lm(datos~id, data = df3)
kde.plots <- kdeplots(df3, aes(datos, color = transf)) + facet_wrap(~transf, scales = "free")
kde.plots
library(MASS)
df3 <- data.frame(df, id = 1:length(df$datos))
reglin <- lm(datos~id, data = df3)
df3 <- rbind(df3, data.frame(datos = boxcox(lm), transf = "Box-Cox"))
library(MASS)
df3 <- data.frame(df, id = 1:length(df$datos))
reglin <- lm(datos~id, data = df3)
df3 <- rbind(df3, data.frame(datos = boxcox(reglin), transf = "Box-Cox"))
library(MASS)
df3 <- data.frame(df, id = 1:length(df$datos))
reglin <- lm(datos~id, data = df3)
df3 <- rbind(df3, data.frame(datos = boxcox(reglin, plotit = F), transf = "Box-Cox"))
box.cox.t <- boxcox(reglin, plotit = F)
library(MASS)
df3 <- data.frame(df, id = 1:length(df$datos))
reglin <- lm(datos~id, data = df3)
df3 <- rbind(df3, data.frame(datos = boxcox(reglin, plotit = F)$y, transf = "Box-Cox"))
df3
box.cox.t$y
