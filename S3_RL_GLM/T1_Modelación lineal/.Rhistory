labs(caption = "Datos simulados. El área gris representa los intervalos de confianza al 95% \n
de la estimación de ambos parámetros")
lin.plot3
conf.plot.reg1 <- data.reg1 + geom_smooth(method = lm,
colour = rgb(118,78,144, maxColorValue = 255)) +
labs(caption = "Datos simulados. El área gris representa el intervalo de confianza de la regresión al 95%",
subtitle = paste("Modelo ajustado: v2 = ",
round(reg1$coefficients[1],2),
" + ",
round(reg1$coefficients[2],2),
"*v1 + e"))
conf.plot.reg1
w <- shapiro.test(df.reg1$v2)
qqplot1 <- ggplot(data = df.reg1, aes(sample = v2)) +
geom_qq(colour = "deepskyblue4", size = 3, alpha = 0.5) +
geom_qq_line(colour = rgb(118,78,144, maxColorValue = 255), size = 1) +
annotate("text", x = 1, y = 0,
label = paste("W = ", round(w[["statistic"]],2), "; p ",
ifelse(w[["p.value"]] < 0.001,
"< 0.001",
round(w[["p.value"]],2))),
colour = "gray 50"
) +
blank_theme() +
labs(title = "Gráfico QQ",
x = "Cuantiles teóricos para la muestra",
y = "Datos reales")
qqplot1
scale.loc.plot <- ggplot(reg1, aes(.fitted, sqrt(abs(.stdresid)))) +
geom_point(na.rm=TRUE, colour = "deepskyblue4", size = 3, alpha = 0.5) +
stat_smooth(method="loess", na.rm = TRUE, colour = rgb(118,78,144, maxColorValue = 255)) +
labs(x = "Valores ajustados",
y = expression(sqrt("|Residuales estandarizados|")),
title = "Escala-Locación"
) +
blank_theme()
scale.loc.plot
#df.reg1["std.resids"] <- reg1[["residuals"]]/sd(reg1[["residuals"]])
df.reg1["std.resids"] <- rstandard(reg1)
resid.plot <- ggplot(data = df.reg1, aes(x = ajustados, y = std.resids, colour = std.resids)) +
geom_point(size = 3, alpha = 0.5) +
stat_smooth(method = "loess", colour = rgb(118,78,144, maxColorValue = 255)) + geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
labs(title = "Gráfico de Residuales",
x = "Valores ajustados",
y = "Residuales estandarizados") +
blank_theme() +
scale_color_gradient2(low = "firebrick",
midpoint = 0,
mid = "deepskyblue4",
high = "firebrick",
breaks = c(-2, 0, 2),
limits = c(-2, 2),
oob = scales::squish)
resid.plot
cairo_pdf("diag.pdf", height = 4, width = 4*1.61)
qqplot1
scale.loc.plot
resid.plot
dev.off()
plotsave <- function(plot.list, name.list, height = 4, width = 4*1.61){
for (i in 1:length(plot.list)) {
cairo_pdf(name.list[i], height = height, width = width)
plot.list[[i]]
dev.off()
}
}
plot.list <- list(qqplot1, scale.loc.plot, resid.plot)
name.list <- c("qq.pdf", "scale.pdf", "resid.pdf")
plotsave(plot.list, name.list)
cairo_pdf("qq.pdf", height = 4, width = 4.61)
qqplot1
dev.off()
cairo_pdf("scale.pdf", height = 4, width = 4.61)
scale.loc.plot
dev.off()
cairo_pdf("scale.pdf", height = 4, width = 4.61)
resid.plot
dev.off()
cairo_pdf("scale.pdf", height = 4, width = 4.61)
scale.loc.plot
dev.off()
cairo_pdf("resid.pdf", height = 4, width = 4.61)
resid.plot
dev.off()
w <- shapiro.test(df.reg1$v2)
df.reg1["std.resids"] <- rstandard(reg1)
qqplot1 <- ggplot(data = df.reg1, aes(y = st.resids, sample = v2)) +
geom_qq(colour = "deepskyblue4", size = 3, alpha = 0.5) +
geom_qq_line(colour = rgb(118,78,144, maxColorValue = 255), size = 1) +
annotate("text", x = 1, y = 0,
label = paste("W = ", round(w[["statistic"]],2), "; p ",
ifelse(w[["p.value"]] < 0.001,
"< 0.001",
round(w[["p.value"]],2))),
colour = "gray 50"
) +
blank_theme() +
labs(title = "Gráfico QQ",
x = "Cuantiles teóricos para la muestra",
y = "Datos reales")
qqplot1
w <- shapiro.test(df.reg1$v2)
df.reg1["std.resids"] <- rstandard(reg1)
qqplot1 <- ggplot(data = df.reg1, aes(y = std.resids, sample = v2)) +
geom_qq(colour = "deepskyblue4", size = 3, alpha = 0.5) +
geom_qq_line(colour = rgb(118,78,144, maxColorValue = 255), size = 1) +
annotate("text", x = 1, y = 0,
label = paste("W = ", round(w[["statistic"]],2), "; p ",
ifelse(w[["p.value"]] < 0.001,
"< 0.001",
round(w[["p.value"]],2))),
colour = "gray 50"
) +
blank_theme() +
labs(title = "Gráfico QQ",
x = "Cuantiles teóricos para la muestra",
y = "Datos reales")
qqplot1
w <- shapiro.test(df.reg1$v2)
df.reg1["std.resids"] <- rstandard(reg1)
qqplot1 <- ggplot(data = df.reg1, aes(sample = v2)) +
geom_qq(colour = "deepskyblue4", size = 3, alpha = 0.5) +
geom_qq_line(colour = rgb(118,78,144, maxColorValue = 255), size = 1) +
annotate("text", x = 1, y = 0,
label = paste("W = ", round(w[["statistic"]],2), "; p ",
ifelse(w[["p.value"]] < 0.001,
"< 0.001",
round(w[["p.value"]],2))),
colour = "gray 50"
) +
blank_theme() +
labs(title = "Gráfico QQ",
x = "Cuantiles teóricos para la muestra",
y = "Datos reales")
qqplot1
?bartlett.test
bartlett.test(v2~v1, data = df.reg1)
length(df.reg1$v1)
97/2
42+45
48+47
48+49
df.reg2 <- df.reg1[,1:2]
df.reg2["grupo"] <- c(rep("A", 48), rep("B", 47))
df.reg2 <- df.reg1[,1:2]
df.reg2["grupo"] <- c(rep("A", 48), rep("B", 49))
if(!require(gap)) install.packages("gap", dependencies = T)
df.reg2 <- df.reg1[,1:2]
df.reg2["grupo"] <- c(rep("A", 48), rep("B", 49))
#if(!require(gap)) install.packages("gap", dependencies = T)
df.reg2 <- df.reg1[,1:2]
df.reg2["grupo"] <- c(rep("A", 48), rep("B", 49))
library(gap)
chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
comp.reg
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
length(df.reg2[df.reg2$grupo=="A"])
df.reg2
length(df.reg2$v1[df.reg2$grupo=="A"])
length(df.reg2$v1[df.reg2$grupo=="B"])
df.reg1
comp.reg
print(comp.reg)
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
print("\n",comp.reg)
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
print(paste("\n",comp.reg))
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
print(comp.reg)
dat1 <- matrix(c(
1.2, 1.9, 0.9,
1.6, 2.7, 1.3,
3.5, 3.7, 2.0,
4.0, 3.1, 1.8,
5.6, 3.5, 2.2,
5.7, 7.5, 3.5,
6.7, 1.2, 1.9,
7.5, 3.7, 2.7,
8.5, 0.6, 2.1,
9.7, 5.1, 3.6), byrow=TRUE, ncol=3)
dat2 <- matrix(c(
1.4, 1.3, 0.5,
1.5, 2.3, 1.3,
3.1, 3.2, 2.5,
4.4, 3.6, 1.1,
5.1, 3.1, 2.8,
5.2, 7.3, 3.3,
6.5, 1.5, 1.3,
7.8, 3.2, 2.2,
8.1, 0.1, 2.8,
9.5, 5.6, 3.9), byrow=TRUE, ncol=3)
y1<-dat1[,3]
y2<-dat2[,3]
x1<-dat1[,1:2]
x2<-dat2[,1:2]
chow.test.r<-chow.test(y1,x1,y2,x2)
chow.test.r
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
print(comp.reg)
ggplot(data = df.reg2, aes(x = v1, y = v2)) +
geom_smooth(method = lm, color = rgb(118,78,144, maxColorValue = 255), fill = "gray70") +
facet_wrap(~grupo)
ggplot(data = df.reg2, aes(x = v1, y = v2, group = grupo)) +
geom_smooth(method = lm, color = rgb(118,78,144, maxColorValue = 255), fill = "gray70")
ggplot(data = df.reg2, aes(x = v1, y = v2, group = grupo)) +
geom_point(color = "deepskyblue4", alpha = 0.5, size = 3)
geom_smooth(method = lm, color = rgb(118,78,144, maxColorValue = 255), fill = "gray70")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo)) +
geom_point(color = "deepskyblue4", alpha = 0.5, size = 3),
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm, color = rgb(118,78,144, maxColorValue = 255), fill = "gray70")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = colour)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm, color = rgb(118,78,144, maxColorValue = 255), fill = "gray70")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm, color = rgb(118,78,144, maxColorValue = 255), fill = "gray70")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm, color = rgb(118,78,144, maxColorValue = 255), fill = "gray70") +
blank_theme()
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme()
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
caption = "Datos simulados")
cairo_pdf("chow.pdf")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["df.1"], ", ", comp.reg["df.2"], ") = ", comp.reg["F value"], ", ", "p = ", comp.reg["P value"]),
caption = "Datos simulados")
dev.off()
cairo_pdf("chow.pdf")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ", comp.reg["F value"], ", ", "p = ", comp.reg["P value"]),
caption = "Datos simulados")
dev.off()
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ", comp.reg["F value"], ", ", "p = ", comp.reg["P value"]),
caption = "Datos simulados")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ", comp.reg["F value"], ", ", "p = ", comp.reg["P value"]),
caption = "Datos simulados")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ", comp.reg["F value"], ", ", "p = ", comp.reg["P value"]),
caption = "Datos simulados")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ", comp.reg["F value"], ", ", "p = ", comp.reg["P value"]),
caption = "Datos simulados")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ", comp.reg["F value"], ", ", "p = ", comp.reg["P value"]),
caption = "Datos simulados")
if(!require(gap)) install.packages("gap", dependencies = T)
# Tema personalizado
blank_theme <- function(){
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50",
family = "Montserrat"),
legend.position = "none"
)
}
# Función para graficar la relación entre dos variables; i.e., una forma elegante de llamarle a un gráfico de dispersión con valores por defecto...
rel.plot <- function(data, aest,
medidas = TRUE,
corre = NA, covar = NA,
eq = "", ...){
# Construcción del gráfico sin anotaciones
plot <- ggplot(data = data, aest) +
labs(title = "Relación entre dos variables",
caption = paste("Datos simulados: ", eq)) +
geom_point(color = "deepskyblue4", alpha = 0.5, size = 2) +
expand_limits(y = c(5, -3)) +
blank_theme()
# Si medidas es TRUE, agregar las medidas al gráfico
ifelse(isTRUE(medidas),
plot <- plot + annotate("text", x = 15, y = -2,
label = paste("Cor. = ", round(corre, 2),
"\n Cov. = ", round(covar,2)),
color = "gray50"),
plot
)
return(plot)
}
df1 <- data.frame(v1 = -20:20)
df1["v2"] <- (10+2*df1$v1)
df1
covar <- cov(df1$v1, df1$v2)
covar
corre <- cor(df1$v1, df1$v2)
corre
library(ggplot2)
lin.plot1 <- rel.plot(data = df1, aest = aes(v1, v2),
eq = "v2 = 10 + 2*v1",
covar = covar, corre = corre)
lin.plot1
df1["v3"] <- (-df1$v1^2)
pot.plot <- rel.plot(data = df1, aest = aes(v1, v3),
eq = "v3 = -v1^2",
covar = cov(df1$v2, df1$v3),
corre = cor(df1$v2, df1$v3)
)
pot.plot
df1["v4"] <- sin(df1$v1)
sin.plot <- rel.plot(data = df1, aest = aes(v1, v4),
eq = "v4 = sin(v1)",
covar = cov(df1$v1, df1$v4),
corre = cor(df1$v1, df1$v4))
sin.plot
df2 <- data.frame(v1 = df1$v1[df1$v1 > 0],
v2 = df1$v1[df1$v1 > 0]^2,
mono = "monótona")
df2 <- rbind(df2, data.frame(v1= df1$v1,
v2 = df1$v3,
mono = "no monótona"))
mono.plot <- rel.plot(data = df2, aest = aes(v1, v2),
eq = "v2 = 10 + 2*v1 | v2 = -v1^2",
medidas = FALSE) +
facet_wrap(~mono, nrow = 2, scales = "free_y") +
theme(aspect.ratio = 1/1.61)
mono.plot
paste("Pearson = ",
round((cor(df2$v1[df2$mono == "monótona"],
df2$v2[df2$mono == "monótona"],
method = "pearson")), 2)
)
paste("Spearman = ",
round((cor(df2$v1[df2$mono == "monótona"],
df2$v2[df2$mono == "monótona"],
method = "spearman")), 2)
)
df.reg1 <- read.csv("example_data.csv")
data.reg1 <- rel.plot(data = df.reg1, aest = aes(v1, v2),
medidas = T,
corre = cor(df.reg1$v1, df.reg1$v2),
covar = cov(df.reg1$v1, df.reg1$v2))
data.reg1
reg1 <- lm(v2~v1, data = df.reg1)
summary(reg1)
df.reg1["ajustados"] <-reg1$fitted.values
lin.plot2 <- data.reg1 +
geom_line(data = df.reg1,
aes(x = v1, y = ajustados),
colour = rgb(118,78,144, maxColorValue = 255),
size = 1) +
labs(subtitle = paste("Modelo ajustado: v2 = ",
round(reg1$coefficients[1],2),
" + ",
round(reg1$coefficients[2],2),
"*v1 + e"))
lin.plot2
confint.reg1 <- confint(reg1)
confint.reg1
df.reg1["inf.int"] <- confint.reg1[1,1] + confint.reg1[2,1]*df.reg1$v1
df.reg1["sup.int"] <- confint.reg1[1,2] + confint.reg1[2,2]*df.reg1$v1
lin.plot3 <- lin.plot2 +
geom_ribbon(data = df.reg1, aes(ymin = inf.int, ymax = sup.int),
fill = "gray70",
alpha = 0.3) +
labs(caption = "Datos simulados. El área gris representa los intervalos de confianza al 95% \n
de la estimación de ambos parámetros")
lin.plot3
conf.plot.reg1 <- data.reg1 + geom_smooth(method = lm,
colour = rgb(118,78,144, maxColorValue = 255)) +
labs(caption = "Datos simulados. El área gris representa el intervalo de confianza de la regresión al 95%",
subtitle = paste("Modelo ajustado: v2 = ",
round(reg1$coefficients[1],2),
" + ",
round(reg1$coefficients[2],2),
"*v1 + e"))
conf.plot.reg1
w <- shapiro.test(df.reg1$v2)
qqplot1 <- ggplot(data = df.reg1, aes(sample = v2)) +
geom_qq(colour = "deepskyblue4", size = 3, alpha = 0.5) +
geom_qq_line(colour = rgb(118,78,144, maxColorValue = 255), size = 1) +
annotate("text", x = 1, y = 0,
label = paste("W = ", round(w[["statistic"]],2), "; p ",
ifelse(w[["p.value"]] < 0.001,
"< 0.001",
round(w[["p.value"]],2))),
colour = "gray 50"
) +
blank_theme() +
labs(title = "Gráfico QQ",
x = "Cuantiles teóricos para la muestra",
y = "Datos reales")
qqplot1
scale.loc.plot <- ggplot(reg1, aes(.fitted, sqrt(abs(.stdresid)))) +
geom_point(na.rm=TRUE, colour = "deepskyblue4", size = 3, alpha = 0.5) +
stat_smooth(method="loess", na.rm = TRUE, colour = rgb(118,78,144, maxColorValue = 255)) +
labs(x = "Valores ajustados",
y = expression(sqrt("|Residuales estandarizados|")),
title = "Escala-Locación"
) +
blank_theme()
scale.loc.plot
resid.plot <- ggplot(data = df.reg1, aes(x = ajustados, y = std.resids, colour = std.resids)) +
geom_point(size = 3, alpha = 0.5) +
stat_smooth(method = "loess", colour = rgb(118,78,144, maxColorValue = 255)) +
geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
labs(title = "Gráfico de Residuales",
x = "Valores ajustados",
y = "Residuales estandarizados") +
blank_theme() +
scale_color_gradient2(low = "firebrick",
midpoint = 0,
mid = "deepskyblue4",
high = "firebrick",
breaks = c(-2, 0, 2),
limits = c(-2, 2),
oob = scales::squish)
resid.plot
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ",
round(comp.reg["F value"],2), ", ", "p = ", ifelse(comp.reg["P value"] < 0.001,
" < 0.001",
paste(" = ", comp.reg["P value"]))),
caption = "Datos simulados")
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ",
round(comp.reg["F value"],2), ", ", "p = ", ifelse(comp.reg["P value"] < 0.001,
" < 0.001",
paste(" = ", comp.reg["P value"]))),
caption = "Datos simulados")
df.reg2 <- df.reg1[,1:2]
df.reg2["grupo"] <- c(rep("A", 48), rep("B", 49))
comp.reg <- chow.test(y1 = df.reg2$v2[df.reg2$grupo == "A"],
x1 = df.reg2$v1[df.reg2$grupo == "A"],
y2 = df.reg2$v2[df.reg2$grupo == "B"],
x2 = df.reg2$v1[df.reg2$grupo == "A"])
print(comp.reg)
ggplot(data = df.reg2, aes(x = v1, y = v2, colour = grupo, shape = grupo)) +
geom_point(alpha = 0.5, size = 3) +
geom_smooth(method = lm) +
blank_theme() +
labs(title = "Regresión lineal con dos grupos",
subtitle = paste("F (", comp.reg["d.f.1"], ", ", comp.reg["d.f.2"], ") = ",
round(comp.reg["F value"],2), ", ", "p = ", ifelse(comp.reg["P value"] < 0.001,
" < 0.001",
paste(" = ", comp.reg["P value"]))),
caption = "Datos simulados")
