scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
library(ggplot2)
n <- 100000
v1 <- data.frame(var = rnorm(n))
sds <- data.frame(xf = c(3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
uni.norm <- ggplot() +
geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = "deepskyblue4",
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
library(openxlsx)
dependientes <- read.xlsx("datos_t.xlsx")
dependientes
library(openxlsx)
dependientes <- read.xlsx("datos_t.xlsx", sheet = 2)
dependientes
dependientes.m <- melt(dependientes, value.name = "LT", na.rm = F)
library(reshape2)
dependientes.m <- melt(dependientes, value.name = "LT", na.rm = F)
library(reshape2)
dependientes.m <- melt(dependientes, value.name = "LT", na.rm = F)
dependientes.m
library(reshape2)
dependientes.m <- melt(dependientes, value.name = "LT", na.rm = T)
dependientes.m
t.test(LT~variable, data = dependientes.m, paired = T)
rt
?rt
n <- 100000
v1 <- data.frame(var = rt(n))
n <- 100000
v1 <- data.frame(var = rt(n, df = 1))
sds <- data.frame(xf = c(3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
uni.norm <- ggplot() +
geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = "deepskyblue4",
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
n <- 100000
v1 <- data.frame(var = rt(n, df = 10))
sds <- data.frame(xf = c(3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
uni.norm <- ggplot() +
geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = "deepskyblue4",
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
n <- 100000
v1 <- data.frame(var = rt(n, df = 10))
sds <- data.frame(xf = c(3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
uni.norm <- ggplot() +
#geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = "deepskyblue4",
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
n <- 100000
v1 <- data.frame(var = rt(n, df = 10))
sds <- data.frame(xf = c(3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
uni.norm <- ggplot() +
#geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = NA,
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
n <- 100000
v1 <- data.frame(var = rt(n, df = 10))
sds <- data.frame(xf = c(5, 3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
uni.norm <- ggplot() +
#geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = NA,
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
#Medias
mean(A)
mean(B)
mean(mat$V1[mat$V1 == "A"]) # Error, poner atención a la columna que se está seleccionando
mean(mat$V2[mat$V1 == "A"])
mean(mat$V2[mat$V1 == "B"])
rcompanion::groupwiseMean(v1~grupo, data = df1 , conf = 0.95)
rcompanion::groupwiseMean(V2~V1, data = mat , conf = 0.95)
ttest <- t.test(v1 ~ grupo, data = df1, var.equal = T)
p_val <- ttest[["p.value"]]
ttest <- t.test(v1 ~ grupo, data = df1, var.equal = T)
typeof(ttest)
p_val <- ttest[["p.value"]]
ttest <- t.test(v1 ~ grupo, data = df1, var.equal = T)
typeof(ttest)
p_val <- ttest[["p.value"]]
p_val
ttest <- t.test(v1 ~ grupo, data = df1, var.equal = T)
typeof(ttest)
p_val <- ttest$p.value
p_val
p_val <- ttest$p.value
p_val
ttest <- t.test(v1 ~ grupo, data = df1, var.equal = T, paired = T)
typeof(ttest)
p_val <- ttest$p.value
p_val
ttest <- t.test(v1 ~ grupo, data = df1, var.equal = T, paired = F)
typeof(ttest)
p_val <- ttest$p.value
p_val
t.test(V2~V1, data = mat, var.equal = T, paired = F)
ttest <- t.test(V2 ~ V1, data = mat, var.equal = T, paired = F)
typeof(ttest)
p_val <- ttest$p.value
p_val
# Código
# Opción de Brenda: Matrices SOLO pueden contener datos de un tipo (si hay caracteres, los números también se transformarán a caractér)
mat <- matrix(rep(1, 10), rep(2, 10), A, B, ncol = 2) # Error
# Código
# Opción de Brenda: Matrices SOLO pueden contener datos de un tipo (si hay caracteres, los números también se transformarán a caractér)
#mat <- matrix(rep(1, 10), rep(2, 10), A, B, ncol = 2) # Error
#----------------------
mat <- matrix(c(rep(1, length(A)), rep(2,  length(B)), A, B), ncol = 2)
mat <- as.data.frame(mat)
mat$V1 <- as.character(mat$V1)
mat$V1[mat$V1 == "1"] <- "A"
mat$V1[mat$V2 == "2"] <- "B"
#-----------------------
# Variante
mat <- matrix(c(rep(1, length(A)), rep(2,  length(B)), A, B), ncol = 2)
mat <- as.data.frame(mat)
mat$V1 <- as.character(mat$V1)
mat$V1 <- ifelse(mat$V1 == "1", "A", "B")
#-------------------------
# Variante:
mat <- matrix(c(rep(1, length(A)), rep(2,  length(B)), A, B), ncol = 2)
mat <- as.data.frame(mat)
mat$V1 <- LETTERS[mat$V1]
mat
A <- rnorm(10, 10, 0.1)
B <- rnorm(10, 11, 0.1)
data.frame(A, B)
df1 <- data.frame(grupo = "A", v1 = A)
df1 <- rbind(df1, data.frame(grupo = "B", v1 = B))
df1
# Código
# Opción de Brenda: Matrices SOLO pueden contener datos de un tipo (si hay caracteres, los números también se transformarán a caractér)
#mat <- matrix(rep(1, 10), rep(2, 10), A, B, ncol = 2) # Error
#----------------------
mat <- matrix(c(rep(1, length(A)), rep(2,  length(B)), A, B), ncol = 2)
mat <- as.data.frame(mat)
mat$V1 <- as.character(mat$V1)
mat$V1[mat$V1 == "1"] <- "A"
mat$V1[mat$V2 == "2"] <- "B"
#-----------------------
# Variante
mat <- matrix(c(rep(1, length(A)), rep(2,  length(B)), A, B), ncol = 2)
mat <- as.data.frame(mat)
mat$V1 <- as.character(mat$V1)
mat$V1 <- ifelse(mat$V1 == "1", "A", "B")
#-------------------------
# Variante:
mat <- matrix(c(rep(1, length(A)), rep(2,  length(B)), A, B), ncol = 2)
mat <- as.data.frame(mat)
mat$V1 <- LETTERS[mat$V1]
mat
#Medias
mean(A)
mean(B)
mean(mat$V1[mat$V1 == "A"]) # Error, poner atención a la columna que se está seleccionando
mean(mat$V2[mat$V1 == "A"])
mean(mat$V2[mat$V1 == "B"])
rcompanion::groupwiseMean(v1~grupo, data = df1 , conf = 0.95)
rcompanion::groupwiseMean(V2~V1, data = mat , conf = 0.95)
library(ggplot2)
n <- 100000
v1 <- data.frame(var = rnorm(n))
sds <- data.frame(xf = c(3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
uni.norm <- ggplot() +
geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = "deepskyblue4",
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
t.test(V2~V1, data = mat, var.equal = T, paired = F)
ttest <- t.test(V2 ~ V1, data = mat, var.equal = T, paired = F)
typeof(ttest)
p_val <- ttest$p.value
p_val
dependientes <- openxlsx::read.xlsx("datos_t.xlsx", sheet = 2)
dependientes
dependientes.m <- reshape2::melt(dependientes, value.name = "LT", na.rm = T)
dependientes.m
?melt
dependientes.m <- reshape2::melt(dependientes, value.name = "LT", na.rm = T, variable.name = "periodo")
dependientes.m
t.test(LT~variable, data = dependientes.m, paired = T)
t.test(LT~periodo, data = dependientes.m, paired = T)
ICs <- rcompanion::groupwiseMean(V2~V1, data = mat, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50", family = "Montserrat"),
legend.position = "none") +
labs(x = "grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest[["parameter"]], ", 0.05) = ", round(ttest[["statistic"]],2), "; Valor de p = ", p_val))
error.plot
ICs <- rcompanion::groupwiseMean(v1~grupo, data = df1, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50", family = "Montserrat"),
legend.position = "none") +
labs(x = "grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest[["parameter"]], ", 0.05) = ", round(ttest[["statistic"]],2), "; Valor de p = ", p_val))
error.plot
ICs <- rcompanion::groupwiseMean(v1~grupo, data = df1, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50", family = "Montserrat"),
legend.position = "none") +
labs(x = "grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest$parameter, ", 0.05) = ", round(ttest$statistic,2), "; Valor de p = ", p_val))
error.plot
ICs <- rcompanion::groupwiseMean(v1~grupo, data = df1, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50", family = "Montserrat"),
legend.position = "none") +
labs(x = "grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest$parameter, ", 0.05) = ", round(ttest$statistic,2), "; Valor de p = ", ifelse(p_val < 0.0001, "p < 0.0001", p_val)))
error.plot
ICs <- rcompanion::groupwiseMean(v1~grupo, data = df1, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50", family = "Montserrat"),
legend.position = "none") +
labs(x = "grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest$parameter, ", 0.05) = ", round(ttest$statistic,2), "; ", ifelse(p_val < 0.0001, "p < 0.0001", paste("p = ", p_val))))
error.plot
ICs <- rcompanion::groupwiseMean(v1~grupo, data = df1, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50", family = "Montserrat"),
legend.position = "none") +
labs(x = "grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest$parameter, ", 0.05) = ", round(ttest[["statistic"]] ,2), "; ", ifelse(p_val < 0.0001, "p < 0.0001", paste("p = ", p_val))))
error.plot
ICs <- rcompanion::groupwiseMean(v1~grupo, data = df1, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50", family = "Montserrat"),
legend.position = "none") +
labs(x = "Grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest$parameter, ", 0.05) = ", round(ttest[["statistic"]] ,2), "; ", ifelse(p_val < 0.0001, "p < 0.0001", paste("p = ", p_val))))
error.plot
ICs <- rcompanion::groupwiseMean(v1~grupo, data = df1, conf = 0.95)
error.plot <- ggplot(data = ICs, aes(x = grupo, y = Mean)) +
geom_point(color = "deepskyblue4") +
geom_errorbar(aes(ymin = Trad.lower, ymax = Trad.upper), color = "deepskyblue4") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(colour = "gray50"),
legend.position = "none") +
labs(x = "Grupo",
y = "x",
title = "¿Diferencias significativas?",
subtitle ="Medias e intervalos de confianza para una variable aleatoria",
caption =  paste("t(v = ", ttest$parameter, ", 0.05) = ", round(ttest[["statistic"]] ,2), "; ", ifelse(p_val < 0.0001, "p < 0.0001", paste("p = ", p_val))))
error.plot
library(ggplot2)
n <- 100000
v1 <- data.frame(var = rnorm(n))
sds <- data.frame(xf = c(3, 1.96, 1))
sds["AUC"] <- NA
for (i in seq_along(sds$xf)) {
sds$AUC[i] <- as.character(round(1 - length(v1$var[(v1$var < -sds$xf[i]) | (v1$var > sds$xf[i])])/n, 2))
}
sds
uni.norm <- ggplot() +
geom_rect(data = sds, aes(xmin = -xf, xmax = xf, ymin = 0, ymax = Inf, fill = AUC),  alpha = 0.3) +
geom_density(data = v1, aes(var),
kernel = "gaussian",
colour = "deepskyblue4", fill = "deepskyblue4",
alpha = 0.6) +
labs(x = "Z",
y = element_blank(),
title = "Gráfico de densidad de una distribución normal unitaria",
subtitle = expression(paste("n = 100000; ", mu, " = 0; ", sigma, " = 1")),
caption = "Datos simulados") +
theme(panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_blank(),
aspect.ratio = 1/1.61,
axis.ticks = element_blank(),
text = element_text(family = "Montserrat", colour = "gray50")
) +
scale_y_continuous(breaks = NULL) +
scale_x_continuous(breaks = c(-sds$xf, sds$xf))
uni.norm
