[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bioestadística Aplicada con R y RStudio",
    "section": "",
    "text": "¡Hola! Te doy la bienvenida al curso Bioestadística Aplicada con R y RStudio, ofertado por Dr. Plancton.\nEste es el libro de acompañamiento del curso. Aquí encontrarás tanto la teoría como el código que se aborda en el curso, dispuestos en una manera que facilita su lectura, y cuyo objetivo es simplemente proveer una versión lista para ser revisada en cualquier momento, sin necesidad de iniciar RStudio. Cada sección del libro tiene enlaces a los videos correspondientes, en caso de que prefieras ver y escuchar la explicación.\nTen en cuenta que puede existir un desfase entre el material del libro y los videos. La razón es que el material se actualizará para mejorar el contenido, la entrega o la explicación siempre que sea posible, lo cual es fácil de hacer en el libro y las libretas con el código, pero no en los videos; sin embargo, en el momento en el que el desfase sea lo suficientemente grande, también se actualizarán los videos de las secciones correspondientes.\n\n\nEl objetivo de este curso es que seas capaz no solo de implementar distintas técnicas de análisis de datos utilizando R, sino que también puedas ser crítico con tus resultados y que minimices, en la medida de lo posible, el sesgo algorítmico. En este curso aprenderás los fundamentos detrás de las pruebas vistas, en donde abordaremos la teoría desde un punto de vista práctico, buscando que puedas formarte una intuición propia. También trataremos de desmitificar el valor de p y, sobre todo, cómo no interpretarlo. En las partes más abstractas te adentrarás en el aprendizaje automatizado, y verás que hay vida más allá del \\(R^2\\) (regresiones) y la exactitud (clasificaciones).\nUno de los errores más comunes al enseñar estadística con R es tratar de enseñar ambas cosas al mismo tiempo. En este curso, R es solo un medio y no un fin; es decir, no es un curso de R tanto como es un curso de ciencia de datos aplicada; sin embargo, esperamos que el explicar línea por línea el código implementado te permita familiarizarte con el lenguaje conforme lo vas utilizando. Dicho esto, el curso fue diseñado para que personas con muy poco conocimiento de programación en general puedan seguirlo, y siempre podrás contactarnos en caso de que no hayamos explicado algo adecuadamente.\n\n\n\nSi bien es cierto que puedes utilizar y acceder a todo el material del curso desde esta página, te recomiendo encarecidamente unirte al servidor de Discord utilizando tu enlace único (enviado a tu correo al registrarte), pues ahí podrás interactuar no solamente con otros compañeros, sino también con los profesores. Un último comentario, NO es necesario que instales el cliente de Discord en tu computadora o dispositivo móvil, aunque si lo haces podrás recibir las notificaciones sobre modificaciones que se hagan al material."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "3  Introduction",
    "section": "",
    "text": "See Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "s1_biolcdatos.html",
    "href": "s1_biolcdatos.html",
    "title": "Biología como Ciencia de Datos",
    "section": "",
    "text": "En esta sección del curso comenzarás reflexionando sobre el cómo se han aplicado tradicionalmente las técnicas estadísticas a los problemas biológicos, y cómo esta aproximación puede no ser óptima. Después, instalarás R, RStudio y Quarto. Posteriormente te introducirás a R utilizando RStudio y terminarás con una introducción a los conceptos básicos detrás de la visualización de datos."
  },
  {
    "objectID": "c02_intro_r.html",
    "href": "c02_intro_r.html",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "",
    "text": "En la sesión anterior hablamos de cómo la ciencia de datos nos proveé de las herramientas que necesitamos para poder extraer conclusiones sensibles desde nuestros datos; sin embargo, el análisis de nuestros datos va (o debería ir) mucho más allá de aplicar una prueba estadística y dar a conocer el valor de p correspondiente. El análisis de datos es un proceso, y como científicos debemos de ser capaces de reportar ese proceso de una manera ordenada, transparente y reproducible. Es ahí donde entran RStudio y Quarto (la evolución de RMarkdown), así que antes de entrar propiamente al lenguaje de programación R, hablemos de cómo realizar reportes y cómo podemos aprovechar al máximo la interface que provee RStudio. Te adelanto: si lo utilizas adecuadamente, RStudio (en conjunto con Quarto) puede ser el lugar donde escribas tu tesis, por muy inverosímil que parezca. De hecho, este sitio fue construido utilizando ambas cosas. Sin más preámbulo, comencemos por hablar de qué es RStudio."
  },
  {
    "objectID": "c02_intro_r.html#rstudio-un-ambiente-integrado-de-desarrollo",
    "href": "c02_intro_r.html#rstudio-un-ambiente-integrado-de-desarrollo",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.1 RStudio: un ambiente integrado de desarrollo",
    "text": "2.1 RStudio: un ambiente integrado de desarrollo"
  },
  {
    "objectID": "c02_intro_r.html#r-vs.-rstudio",
    "href": "c02_intro_r.html#r-vs.-rstudio",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.1 R vs. RStudio",
    "text": "2.1 R vs. RStudio\nAntes de volar y pretender formar un sitio web o una tesis, comencemos hablando de RStudio. En la sección de preparación instalamos tres cosas diferentes: R, RStudio, y Quarto. Olvidemos a este último por un momento y centrémonos en los dos primeros. R es un lenguaje de programación. Como tal, se ejecuta en consola, ya sea el terminal (macOS/Linux) o el interpretador de comandos cmd en Windows. Lo único que veremos si abrimos/ejecutamos R per-se es una ventana como la siguiente:\n\n\n\nFigure 2.1: Consola de R (R GUI)\n\n\nEs decir, solamente veremos nuestra consola, compuesta por una descripción de la versión de R que estamos utilizando y un prompt (el símbolo >) que nos presiona a darle a la computadora una instrucción. Más allá de ser una interfaz extremadamente simple, no está pensada para el desarrollo de reportes como los que nosotros realizamos. No podemos escribir texto libre, ni tampoco podemos guardar nuestro progreso. Para eso habría que abrir un script, pero hay una mejor alternativa que nos permite hacer eso y mucho más: RStudio. Por el momento hasta aquí vamos a llegar con R, pero no te preocupes, le vamos a dedicar mucho más tiempo posteriormente."
  },
  {
    "objectID": "c02_intro_r.html#el-ide-rstudio",
    "href": "c02_intro_r.html#el-ide-rstudio",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.2 El IDE RStudio",
    "text": "2.2 El IDE RStudio\nMientras que R es un lenguaje de programación ejecutable en consola, RStudio es un ambiente gráfico de desarrollo (IDE). ¿Qué significa? Que es una interfaz gráfica que nos permite no solo ejecutar nuestro código línea a línea, sino que también incluye otros páneles que nos facilitan enormemente la existencia y, además, abre otras puertas para la creación de documentos como este libro. Vayamos por partes.\n\n2.2.1 La ventana de RStudio\nAl abrir RStudio por primera vez te vas a topar con una ventana como la siguiente:\n\n\n\nFigure 2.2: Ventana de RStudio\n\n\nYa sé, ya sé, no se ve mucho más amable que la ventana de R. Es más, se ve mucho más intimidante porque ahora tenemos la consola y otros 3 espacios. Al ser un IDE, RStudio incluye elementos gráficos para todo lo que pudiéramos llegar a necesitar mientras desarrollamos nuestros análisis, entonces vamos a descomponer esta ventana panel por panel, de arriba a abajo y de izquierda a derecha.\n\n\n2.2.2 El editor\nEl primer panel es el editor:\n\n\n\nFigure 2.3: Editor en RStudio\n\n\nEste es, como el nombre sugiere, un editor de textos, que no debemos de confundir con procesador de palabras (i.e., Word o similares). En él vamos a poder escribir sripts o libretas que contengan la serie de pasos que realizamos durante nuestro análisis. Cada una de las pestañas en este panel es siempre un documento de texto simple, independientemente de si es un script o una libreta. Esto tiene varias ventajas, pero la más importante es que nos podemos llevar esos archivos a cualquier computadora y estar bastante seguros de que podremos, cuando menos, ver su contenido y editarlo sin preocuparnos por problemas de compatibilidad entre versiones del software o, peor aún, sistemas operativos (*ejem* Word *ejem*). Estos archivos de texto simple pueden, dependiendo del tipo de archivo, enviar instrucciones a R.\n\n\n2.2.3 La consola\nEl siguiente panel es la consola:\n\n\n\nFigure 2.4: Consola en RStudio\n\n\nEste panel es, literalmente, lo que veíamos al abrir R en sí mismo; es decir, un espacio donde tenemos nuestro prompt y donde se ejecutarán nuestras instrucciones o líneas de comandos. Notarás que hay otras tres pestañas: una llamada Terminal, y otra llamada Background Jobs. Estas son interfaces a la terminal del sistema y a los trabajos que estemos ejecutando en segundo plano. Nuestra interacción con estas dos pestañas va a ser limitada, salvo que realicemos algo muy especializado. En el curso solo entraremos ocasionalmente al Terminal.\n\n\n2.2.4 Scripts y sus limitaciones\nAntes de pasar al siguiente panel es importante hablar de los scripts y las libretas, e intentar hacer un poco de labor de convencimiento. Si has tenido un acercamiento previo a R/RStudio, es bastante probable que estés familiarizado e incluso acostumbrado a trabajar con scripts. Si no, un script de R es un archivo de texto con extensión .R en el que ponemos nuestro código línea a línea. Pensemos en un ejercicio en el que queremos primero sumar 1 y 1, y luego 2 y 2. Nuestro script en RStudio se vería así:\n\n\n\nFigure 2.5: Script en el editor\n\n\nSolo tenemos el código, no tenemos los resultados. ¿La razón? Aún no le hemos dicho a la computadora que queremos que las ejecute. ¿Cómo le decimos? Tenemos dos formas:\n\nEjecutar el script línea a línea, para lo que debemos posicionar nuestro cursor (dar click) sobre la línea a ejecutar, utilizar el atajo de teclado CMD + R en macOS/Linux o CTRL + R en Windows, o dar click sobre el botón Run que está cerca de la esquina superior derecha del panel.\nEjecutar el script completo, para lo que seleccionaríamos todo su contenido y utilizaríamos el mismo atajo de teclado o botón que antes.\n\nSea cual sea la opción que hayas escogido, la salida (el resultado) aparecerá en la consola:\n\n\n\nFigure 2.6: Script ejecutado en consola\n\n\n¿Cuál es el problema? El primero es que en el momento en el que cerremos RStudio esos resultados se van a perder, salvo que los hayamos guardado manualmente en algún lugar. El segundo tiene que ver con una falta de cohesión: el código (las sumas) están por un lado, mientras que los resultados están por otro. El tercero se deriva de los dos anteriores: falta de legibilidad y reproducibilidad. No podemos hacer el reporte al mismo tiempo en que analizamos los datos, y si en algún momento volvemos al script debemos de ejecutarlo todo nuevamente para ver los resultados. Suena engorroso, ¿no? Un cuarto problema es que no tenemos descripciones de nuestros resultados. Si ya has trabajado con estos archivos me vas a decir “para eso existen los comentarios”, a lo que yo te respondería que no, los comentarios no son para eso. Si no has trabajado con R ni ningún otro lenguaje de programación te preguntarás qué es un comentario. Bien, un comentario es un fragmento de texto no ejecutable; es decir, es algo que podemos escribir y pasarle a la consola pero que no se va a ejecutar. En R estos están dados por el operador #. Agreguemos un comentario a nuestro script con la palabra “Sumas” y ejecutémoslo todo nuevamente:\n\n\n\nFigure 2.7: Script con comentarios ejecutado en consola\n\n\nComo esperábamos, en la consola no hay una salida asociada a la instrucción # Sumas, por lo tanto puedo usar esos comentarios para describir mis resultados, ¿no? La respuesta es, como en muchas otras cosas, depende. O, mejor dicho, de que se puede, se puede, que debamos hacerlo, es otra historia. Los comentarios tienen la función de describir muy brevemente qué intención tiene el código, no escribir párrafos completos con el reporte de los resultados. Comentarios válidos son agregar al inicio del script quién lo escribió, qué hace el código contenido en él, un medio de contacto, y breves descripciones de qué se hace en cada línea, sin repetir el código en texto simple (no decir # Suma 1 y 1 si el código es 1+1, por ejemplo). Existe otro gran problema el cuál no es obvio en este ejercicio, pero que tiene que ver con la carga de datos en archivos dentro de nuestra computadora (archivos .csv o .xlsx, por ejemplo), pero eso lo veremos en un tema posterior. Por el momento veamos una alternativa que resuelve todos estos problemas.\n\n\n2.2.5 Libretas y reportes: Quarto\nAquí es donde entran Quarto y las libretas. Al instalar Quarto no instalamos un programa per-se, sino que instalamos una extensión a RStudio que es, y cito textualmente, “un sistema de publicación científica y técnica de código abierto construido sobre Pandoc”, que permite, citando nuevamente: i) crear contenido dinámico no solo con R sino con otros lenguajes de programación; ii) escribir documentos como texto plano; iii) publicar artículos, reportes, presentaciones, sitios web, blogs y libros de alta calidad en formatos HTML, PDF, MS Word, ePUB; y iv) escribir con markdown científico, incluyendo ecuaciones, citas, referencias cruzadas, páneles de figuras, anotaciones, diseños avanzados y más. ¿A que ya suena mejor que los scripts? Sin ir más lejos, todo el material que utilizaremos en este curso fue escrito en RStudio utilizando Quarto, y puedes ver la versión final en el sitio web de acompañamiento. Debido a que explicar Quarto es un tema que merece le dediquemos tiempo y estar más arriba que un subtema de IDE RStudio, vamos a dejarlo de lado por el momento, solo revisemos cómo crear un nuevo documento y las diferencias fundamentales con los scritps. Para crear un documento podemos ir a la barra de herramientas -> File -> New file -> Quarto document, o utilizar el botón correspondiente en la ventana de RStudio:\n\n\n\nFigure 2.8: Nuevo documento Quarto\n\n\nAl darle click nos va a aparecer la siguiente ventana para personalizar el documento:\n\n\n\nFigure 2.9: Opciones documento Quarto\n\n\nAquí añadirás el título de tu documento y opcionalmente el autor. Por el momento dejaremos todo lo demás tal y como está y daremos click en Create, lo que abrirá una pestaña nueva en el editor:\n\n\n\nFigure 2.10: Opciones documento Quarto\n\n\nLa pestaña se parece al contenido de un script, la única diferencia es un texto contenido entre ---. A esta parte la podemos identificar como el preámbulo del documento, y es un fragmento de nuestro documento escrito en formato YAML ¿Qué es eso y con qué se come? No te preocupes ahorita por eso, solo necesitas saber ahorita que vamos a desarrollar nuestro trabajo debajo del preámbulo. En la figura Figure 2.11 puedes ver un ejemplo básico de un documento Quarto con el código de nuestras sumas.\n\n\n\nFigure 2.11: Un documento Quarto básico\n\n\nUn ejemplo más claro del potencial de Quarto es, nuevamente, el material de este curso. Pero sigamos explorando la ventana de RStudio\n\n\n2.2.6 El ambiente de trabajo\nEl siguiente panel es lo que se conoce como el ambiente de trabajo (workspace), que nos da un listado de las cosas que le hemos dado a R para que recuerde (objetos). En la siguiente sesión hablaremos largo y tendido de esto, pero veamos un ejemplo donde, utilizando la consola, le digamos a R que recuerde el resultado de la suma 1 + 1, asignándolo a una referencia que arbitráriamente llamaré suma:\n\n\n\nFigure 2.12: Guardar un resultado en la consola\n\n\nDos cosas: 1) La asignación se hizo con el operador <-. Esto es sumamente importante, en R guardamos cosas utilizando ese operador y no =. 2) Al ejecutar la línea no obtuvimos el resultado. Esto es porque solo le dijimos que lo recordara, que lo anotara en un post-it, si quieres, no que nos lo mostrara. Si queremos que nos lo muestre solo tenemos que llamarlo por su nombre (ejecutar en la consola):\n\n\n\nFigure 2.13: Imprimir el resultado\n\n\n¿Qué tiene que ver esto con el ambiente de trabajo? Pues ahora ya no está vacío, ya tenemos una entrada en la lista, en donde se muestra el nombre del objeto y su valor. Conforme vayamos creando más objetos, más entradas tendrá esa lista. Prueba a crear un objeto que contenga el texto \"Hola mundo\" (ojo a las comillas) y dar click en su nombre en el ambiente de trabajo. ¿Qué ocurre?\n\n\n2.2.7 El ambiente gráfico\nEl último panel corresponde al ambiente gráfico. Este panel junta varios elementos a los que es más fácil acceder visualmente. La primera pestaña es un explorador de archivos. puedes dar click a cada carpeta para ver sus elementos, crear nuevas carpetas, y mucho más. En este curso no lo utilizaremos más que como una referencia visual de dónde están ubicados nuestros archivos.\n\n\n\nFigure 2.14: Explorador de archivos\n\n\nLa siguiente pestaña nos muestra la serie de gráficos que hemos ido generando. Podemos ejecutar en la consola el comando plot(cars) y verás que el gráfico se muestra en esta pestaña.\n\n\n\nFigure 2.15: Gráfico en el ambiente gráfico\n\n\nEn la siguiente pestaña encontraremos un listado de las librerías/paqueterías que tenemos instaladas, sus versiones, una breve descripción de para qué son, así como botones para instalarlas o actualizarlas.\n\n\n\nFigure 2.16: Paquetes\n\n\nDespués tenemos la pestaña de ayuda. Aquí podemos ver, valga la redundancia, ayuda sobre R, pero también sobre funciones en las que estemos interesados. Si queremos ver la ayuda de una función FUN vamos a utilizar el comando ?FUN, tal que:\n\n\n\nFigure 2.17: ¡Ayuda!\n\n\nEn la siguiente pestaña tenemos un visor (Viewer), donde tendremos vistas previas de los documentos RMarkdown o Quarto con los que estemos trabajando. Tomando como ejemplo el documento que generamos antes, le daremos click al botón Render con la flecha azul, lo que da como resultado la vista previa en Viewer\n\n\n\nFigure 2.18: Documento Quarto y su renderizado\n\n\nLa última pestaña es un visor de presentaciones, el cual no utilizaremos en este curso."
  },
  {
    "objectID": "c02_intro_r.html#entra-a-quarto",
    "href": "c02_intro_r.html#entra-a-quarto",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.3 Entra a Quarto",
    "text": "2.3 Entra a Quarto\nAhora sí, podemos dedicarle nuestra atención a Quarto. Antes mencioné que era un sistema para la creación de documentos científicos y técnicos, que se instala aparte de R y RStudio (lo hicimos ya en la sesión anterior), y que es sumamente flexible. Vimos también un ejemplo de cómo crear un documento Quarto y un poco de cómo interactuar con él. Ahora entremos a todos los detalles. Retomemos nuestro documento de ejemplo (Figure 2.11).\n\n2.3.1 Preámbulo\nEl primer elemento es el preámbulo, que mencionamos está en formato YAML y que está contenido entre ---. YAML es un formato de serialización de datos legible por humanos. ¿En castellano? Una lista con niveles de pares de claves:valores que definen los metadatos de nuestro documento. En nuestro ejemplo tenemos:\n---\ntitle: \"Untitled\"\n---\nEs decir, el título que aparecerá en el reporte es \"Untitled\", tal y como vimos en la vista previa. Esto no tiene mucho sentido, así que cambiémoslo por \"Mi primer Quarto\" y añadamos una nueva entrada para el autor, tal que:\n---\ntitle: \"Mi primer Quarto\"\nauthor: \"Tu nombre\"\n---\nOtro elemento que usualmente se agrega en el preámbulo es el formato de salida del documento renderizado; es decir, ya presentado para compartir/imprimir. Mi recomendación es exportar a archivos HTML, salvo que vayas a imprimir el documento (PDF), necesites paginación (PDF de nuevo) o que por alguna desafortunada razón necesites un archivo MS Word. Un HTML lo declaramos tal que:\n---\ntitle: \"Mi primer Quarto\"\nauthor: \"Tu nombre\"\nformat:\n  html:\n    code-fold: true\n---\nNotarás algunas cosas. La primera es que html está indentado; es decir, no comienza en la misma posición que format. Esto es para indicar que html pertenece a format, al igual que code-fold pertenece a html. La siguiente es, justamente, que agregamos a la lista la entrada code-fold. Esta es una opción que indica si queremos que el código sea colapsable mediante un botón en el archivo final. En este caso, la indicamos como true, por lo que así será. Si no lo quisiéramos así indicaríamos false. Si renderizamos nuestro documento ahora tendremos:\n\n\n\nFigure 2.19: Primer Quarto renderizado\n\n\nSi tienes curiosidad por saber qué características YAML dieron lugar al libro de acompañamiento, puedes revisar el archivo _quarto.yml.\n\n\n2.3.2 Markdown\nPasando el preámbulo tenemos una sección de texto libre, con algunas anotaciones para el formato del texto."
  },
  {
    "objectID": "c02_intro_rs.html",
    "href": "c02_intro_rs.html",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "",
    "text": "En la sesión anterior hablamos de cómo la ciencia de datos nos proveé de las herramientas que necesitamos para poder extraer conclusiones sensibles desde nuestros datos; sin embargo, el análisis de nuestros datos va (o debería ir) mucho más allá de aplicar una prueba estadística y dar a conocer el valor de p correspondiente. El análisis de datos es un proceso, y como científicos debemos de ser capaces de reportar ese proceso de una manera ordenada, transparente y reproducible. Es ahí donde entran RStudio y Quarto (la evolución de RMarkdown), así que antes de entrar propiamente al lenguaje de programación R, hablemos de cómo realizar reportes y cómo podemos aprovechar al máximo la interface que provee RStudio. Te adelanto: si lo utilizas adecuadamente, RStudio (en conjunto con Quarto) puede ser el lugar donde escribas tu tesis, por muy inverosímil que parezca. De hecho, este sitio fue construido utilizando ambas cosas. Sin más preámbulo, comencemos por hablar de qué es RStudio."
  },
  {
    "objectID": "c02_intro_rs.html#r-vs.-rstudio",
    "href": "c02_intro_rs.html#r-vs.-rstudio",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.1 R vs. RStudio",
    "text": "2.1 R vs. RStudio\nAntes de volar y pretender formar un sitio web o una tesis, comencemos hablando de RStudio. En la sección de preparación instalamos tres cosas diferentes: R, RStudio, y Quarto. Olvidemos a este último por un momento y centrémonos en los dos primeros. R es un lenguaje de programación. Como tal, se ejecuta en consola, ya sea el terminal (macOS/Linux) o el interpretador de comandos cmd en Windows. Lo único que veremos si abrimos/ejecutamos R per-se es una ventana como la siguiente:\n\n\n\nFigure 2.1: Consola de R (R GUI)\n\n\nEs decir, solamente veremos nuestra consola, compuesta por una descripción de la versión de R que estamos utilizando y un prompt (el símbolo >) que nos presiona a darle a la computadora una instrucción. Más allá de ser una interfaz extremadamente simple, no está pensada para el desarrollo de reportes como los que nosotros realizamos. No podemos escribir texto libre, ni tampoco podemos guardar nuestro progreso. Para eso habría que abrir un script, pero hay una mejor alternativa que nos permite hacer eso y mucho más: RStudio. Por el momento hasta aquí vamos a llegar con R, pero no te preocupes, le vamos a dedicar mucho más tiempo posteriormente."
  },
  {
    "objectID": "c02_intro_rs.html#el-ide-rstudio",
    "href": "c02_intro_rs.html#el-ide-rstudio",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.2 El IDE RStudio",
    "text": "2.2 El IDE RStudio\nMientras que R es un lenguaje de programación ejecutable en consola, RStudio es un ambiente gráfico de desarrollo (IDE). ¿Qué significa? Que es una interfaz gráfica que nos permite no solo ejecutar nuestro código línea a línea, sino que también incluye otros páneles que nos facilitan enormemente la existencia y, además, abre otras puertas para la creación de documentos como este libro. Vayamos por partes.\n\n2.2.1 La ventana de RStudio\nAl abrir RStudio por primera vez te vas a topar con una ventana como la siguiente:\n\n\n\nFigure 2.2: Ventana de RStudio\n\n\nYa sé, ya sé, no se ve mucho más amable que la ventana de R. Es más, se ve mucho más intimidante porque ahora tenemos la consola y otros 3 espacios. Al ser un IDE, RStudio incluye elementos gráficos para todo lo que pudiéramos llegar a necesitar mientras desarrollamos nuestros análisis, entonces vamos a descomponer esta ventana panel por panel, de arriba a abajo y de izquierda a derecha.\n\n2.2.1.1 El editor\nEl primer panel es el editor:\n\n\n\nFigure 2.3: Editor en RStudio\n\n\nEste es, como el nombre sugiere, un editor de textos, que no debemos de confundir con procesador de palabras (i.e., Word o similares). En él vamos a poder escribir sripts o libretas que contengan la serie de pasos que realizamos durante nuestro análisis. Cada una de las pestañas en este panel es siempre un documento de texto simple, independientemente de si es un script o una libreta. Esto tiene varias ventajas, pero la más importante es que nos podemos llevar esos archivos a cualquier computadora y estar bastante seguros de que podremos, cuando menos, ver su contenido y editarlo sin preocuparnos por problemas de compatibilidad entre versiones del software o, peor aún, sistemas operativos (*ejem* Word *ejem*). Estos archivos de texto simple pueden, dependiendo del tipo de archivo, enviar instrucciones a R.\n\n\n2.2.1.2 La consola\nEl siguiente panel es la consola:\n\n\n\nFigure 2.4: Consola en RStudio\n\n\nEste panel es, literalmente, lo que veíamos al abrir R en sí mismo; es decir, un espacio donde tenemos nuestro prompt y donde se ejecutarán nuestras instrucciones o líneas de comandos. Notarás que hay otras tres pestañas: una llamada Terminal, y otra llamada Background Jobs. Estas son interfaces a la terminal del sistema y a los trabajos que estemos ejecutando en segundo plano. Nuestra interacción con estas dos pestañas va a ser limitada, salvo que realicemos algo muy especializado. En el curso solo entraremos ocasionalmente al Terminal.\n\n\n2.2.1.3 ¿Reportes como scripts?\nAntes de pasar al siguiente panel es importante hablar de los scripts y las libretas, e intentar hacer un poco de labor de convencimiento. Si has tenido un acercamiento previo a R/RStudio, es bastante probable que estés familiarizado e incluso acostumbrado a trabajar con scripts. Si no, un script de R es un archivo de texto con extensión .R en el que ponemos nuestro código línea a línea. Pensemos en un ejercicio en el que queremos primero sumar 1 y 1, y luego 2 y 2. Nuestro script en RStudio se vería así:\n\n\n\nFigure 2.5: Script en el editor\n\n\nSolo tenemos el código, no tenemos los resultados. ¿La razón? Aún no le hemos dicho a la computadora que queremos que las ejecute. ¿Cómo le decimos? Tenemos dos formas:\n\nEjecutar el script línea a línea, para lo que debemos posicionar nuestro cursor (dar click) sobre la línea a ejecutar, utilizar el atajo de teclado CMD + R en macOS/Linux o CTRL + R en Windows, o dar click sobre el botón Run que está cerca de la esquina superior derecha del panel.\nEjecutar el script completo, para lo que seleccionaríamos todo su contenido y utilizaríamos el mismo atajo de teclado o botón que antes.\n\nSea cual sea la opción que hayas escogido, la salida (el resultado) aparecerá en la consola:\n\n\n\nFigure 2.6: Script ejecutado en consola\n\n\n¿Cuál es el problema? El primero es que en el momento en el que cerremos RStudio esos resultados se van a perder, salvo que los hayamos guardado manualmente en algún lugar. El segundo tiene que ver con una falta de cohesión: el código (las sumas) están por un lado, mientras que los resultados están por otro. El tercero se deriva de los dos anteriores: falta de legibilidad y reproducibilidad. No podemos hacer el reporte al mismo tiempo en que analizamos los datos, y si en algún momento volvemos al script debemos de ejecutarlo todo nuevamente para ver los resultados. Suena engorroso, ¿no? Un cuarto problema es que no tenemos descripciones de nuestros resultados. Si ya has trabajado con estos archivos me vas a decir “para eso existen los comentarios”, a lo que yo te respondería que no, los comentarios no son para eso. Si no has trabajado con R ni ningún otro lenguaje de programación te preguntarás qué es un comentario. Bien, un comentario es un fragmento de texto no ejecutable; es decir, es algo que podemos escribir y pasarle a la consola pero que no se va a ejecutar. En R estos están dados por el operador #. Agreguemos un comentario a nuestro script con la palabra “Sumas” y ejecutémoslo todo nuevamente:\n\n\n\nFigure 2.7: Script con comentarios ejecutado en consola\n\n\nComo esperábamos, en la consola no hay una salida asociada a la instrucción # Sumas, por lo tanto puedo usar esos comentarios para describir mis resultados, ¿no? La respuesta es, como en muchas otras cosas, depende. O, mejor dicho, de que se puede, se puede, que debamos hacerlo, es otra historia. Los comentarios tienen la función de describir muy brevemente qué intención tiene el código, no escribir párrafos completos con el reporte de los resultados. Comentarios válidos son agregar al inicio del script quién lo escribió, qué hace el código contenido en él, un medio de contacto, y breves descripciones de qué se hace en cada línea, sin repetir el código en texto simple (no decir # Suma 1 y 1 si el código es 1+1, por ejemplo). Existe otro gran problema el cuál no es obvio en este ejercicio, pero que tiene que ver con la carga de datos en archivos dentro de nuestra computadora (archivos .csv o .xlsx, por ejemplo), pero eso lo veremos en un tema posterior. Por el momento veamos una alternativa que resuelve todos estos problemas.\n\n\n2.2.1.4 Libretas y reportes: Quarto\nAquí es donde entran Quarto y las libretas. Al instalar Quarto no instalamos un programa per-se, sino que instalamos una extensión a RStudio que es, y cito textualmente, “un sistema de publicación científica y técnica de código abierto construido sobre Pandoc”, que permite, citando nuevamente: i) crear contenido dinámico no solo con R sino con otros lenguajes de programación; ii) escribir documentos como texto plano; iii) publicar artículos, reportes, presentaciones, sitios web, blogs y libros de alta calidad en formatos HTML, PDF, MS Word, ePUB; y iv) escribir con markdown científico, incluyendo ecuaciones, citas, referencias cruzadas, páneles de figuras, anotaciones, diseños avanzados y más. ¿A que ya suena mejor que los scripts? Sin ir más lejos, todo el material que utilizaremos en este curso fue escrito en RStudio utilizando Quarto, y puedes ver la versión final en el sitio web de acompañamiento. Debido a que explicar Quarto es un tema que merece le dediquemos tiempo y estar más arriba que un subtema de IDE RStudio, vamos a dejarlo de lado por el momento, solo revisemos cómo crear un nuevo documento y las diferencias fundamentales con los scritps. Para crear un documento podemos ir a la barra de herramientas -> File -> New file -> Quarto document, o utilizar el botón correspondiente en la ventana de RStudio:\n\n\n\nFigure 2.8: Nuevo documento Quarto\n\n\nAl darle click nos va a aparecer la siguiente ventana para personalizar el documento:\n\n\n\nFigure 2.9: Opciones documento Quarto\n\n\nAquí añadirás el título de tu documento y opcionalmente el autor. Por el momento dejaremos todo lo demás tal y como está y daremos click en Create, lo que abrirá una pestaña nueva en el editor:\n\n\n\nFigure 2.10: Opciones documento Quarto\n\n\nLa pestaña se parece al contenido de un script, la única diferencia es un texto contenido entre ---. A esta parte la podemos identificar como el preámbulo del documento, y es un fragmento de nuestro documento escrito en formato YAML ¿Qué es eso y con qué se come? No te preocupes ahorita por eso, solo necesitas saber ahorita que vamos a desarrollar nuestro trabajo debajo del preámbulo. En la figura Figure 2.11 puedes ver un ejemplo básico de un documento Quarto con el código de nuestras sumas.\n\n\n\nFigure 2.11: Un documento Quarto básico\n\n\nUn ejemplo más claro del potencial de Quarto es, nuevamente, el material de este curso. Pero sigamos explorando la ventana de RStudio\n\n\n\n2.2.2 El ambiente de trabajo\nEl siguiente panel es lo que se conoce como el ambiente de trabajo (workspace), que nos da un listado de las cosas que le hemos dado a R para que recuerde (objetos). En la siguiente sesión hablaremos largo y tendido de esto, pero veamos un ejemplo donde, utilizando la consola, le digamos a R que recuerde el resultado de la suma 1 + 1, asignándolo a una referencia que arbitráriamente llamaré suma:\n\n\n\nFigure 2.12: Guardar un resultado en la consola\n\n\nDos cosas: 1) La asignación se hizo con el operador <-. Esto es sumamente importante, en R guardamos cosas utilizando ese operador y no =. 2) Al ejecutar la línea no obtuvimos el resultado. Esto es porque solo le dijimos que lo recordara, que lo anotara en un post-it, si quieres, no que nos lo mostrara. Si queremos que nos lo muestre solo tenemos que llamarlo por su nombre (ejecutar en la consola):\n\n\n\nFigure 2.13: Imprimir el resultado\n\n\n¿Qué tiene que ver esto con el ambiente de trabajo? Pues ahora ya no está vacío, ya tenemos una entrada en la lista, en donde se muestra el nombre del objeto y su valor. Conforme vayamos creando más objetos, más entradas tendrá esa lista. Prueba a crear un objeto que contenga el texto \"Hola mundo\" (ojo a las comillas) y dar click en su nombre en el ambiente de trabajo. ¿Qué ocurre?\n\n\n2.2.3 El ambiente gráfico\nEl último panel corresponde al ambiente gráfico. Este panel junta varios elementos a los que es más fácil acceder visualmente. La primera pestaña es un explorador de archivos. puedes dar click a cada carpeta para ver sus elementos, crear nuevas carpetas, y mucho más. En este curso no lo utilizaremos más que como una referencia visual de dónde están ubicados nuestros archivos.\n\n\n\nFigure 2.14: Explorador de archivos\n\n\nLa siguiente pestaña nos muestra la serie de gráficos que hemos ido generando. Podemos ejecutar en la consola el comando plot(cars) y verás que el gráfico se muestra en esta pestaña.\n\n\n\nFigure 2.15: Gráfico en el ambiente gráfico\n\n\nEn la siguiente pestaña encontraremos un listado de las librerías/paqueterías que tenemos instaladas, sus versiones, una breve descripción de para qué son, así como botones para instalarlas o actualizarlas.\n\n\n\nFigure 2.16: Paquetes\n\n\nDespués tenemos la pestaña de ayuda. Aquí podemos ver, valga la redundancia, ayuda sobre R, pero también sobre funciones en las que estemos interesados. Si queremos ver la ayuda de una función FUN vamos a utilizar el comando ?FUN, tal que:\n\n\n\nFigure 2.17: ¡Ayuda!\n\n\nEn la siguiente pestaña tenemos un visor (Viewer), donde tendremos vistas previas de los documentos RMarkdown o Quarto con los que estemos trabajando. Tomando como ejemplo el documento que generamos antes, le daremos click al botón Render con la flecha azul, lo que da como resultado la vista previa en Viewer\n\n\n\nFigure 2.18: Documento Quarto y su renderizado\n\n\nLa última pestaña es un visor de presentaciones, el cual no utilizaremos en este curso.\n\n\n2.2.4 Personalizando RStudio\nComo todo IDE, podemos personalizar la apariencia de RStudio. Para hacerlo simplemente ve a la barra de herramientas, Tools -> Global Options. Te aparecerá la siguiente ventana\n\n\n\nFigure 2.19: Ventana de ajustes\n\n\nVamos a revisar algunas de las opciones que te recomiendo tener presentes. Puedes hacer los cambios y aplicarlos todos juntos al final con el botón Apply:\n\nGeneral\n\nBasic\n\nWorkspace: Restore .RData into workspace at startup & Save workspace to .RData on exit. ¿Quieres que cada que cierres RStudio todos los objetos de tu espacio de trabajo se guarden en un archivo, y que esos mismos se carguen la siguiente vez que abras RStudio? Personalmente no es algo con lo que esté de acuerdo, porque más frecuentemente que no vas a querer un ambiente limpio, por lo que estas opciones están desmarcada y en Never, respectivamente.\nHistory: La misma historia (je) que en el caso anterior. ¿Quieres que tu historial de comandos ejecutados se guarde, aún si no guardas el .RData? ¿Quieres que se remuevan los duplicados? Por las mismas razones que antes también las tengo desmarcadas.\n\nGraphics\n\nBackend a Cairo. Simplemente es con qué se están graficando las cosas. ¡ES INDISPENSABLE QUE TENGAS INSTALADO xquartz SI ESTÁS EN macOS/LINUX!\n\n\nAppearance\n\nZoom: ¿Qué tan grandes quieres todos los elementos de la ventana? Para mi trabajo personal, y dependiendo de la resolución del monitor donde se encuentre la ventana, esta oscila entre 100% y 125%, para este curso está en 175-200%\nEditor font y Editor font size: Tipo y tamaño de letra. Personalmente recomiendo no cambiar el tipo de letra.\nEditor theme: Cambia el color de fondo y los colores de realce de la sintaxis. Usualmente trabajo por las noches, por lo que prefiero un tema con fondo obscuro como Tomorrow Night Bright, pero puedes buscar el que tú quieras.\n\nPane Layout\n\nAquí se muestran los cuatro paneles de la ventana de RStudio. Personalmente prefiero tener los dos elementos que más utilizo lado a lado y no uno encima del otro. ¿La razón? El código crece hacia abajo, entonces el espacio vertical tiende a ser más importante que el espacio horizontal. Es decir, que en el panel superior derecho pongo la consola, y en el panel inferior izquierdo el ambiente de trabajo.\n\n\nEl resto de opciones son más específicas, por lo que recomiendo no tocarlas salvo que sepas qué estás moviendo y con qué objetivo. Todo se puede revertir, pero no hay necesidad de fomentar dolores de cabeza."
  },
  {
    "objectID": "c02_intro_rs.html#entra-a-quarto",
    "href": "c02_intro_rs.html#entra-a-quarto",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.3 Entra a Quarto",
    "text": "2.3 Entra a Quarto\nAhora sí, podemos dedicarle nuestra atención a Quarto. Antes mencioné que era un sistema para la creación de documentos científicos y técnicos, que se instala aparte de R y RStudio (lo hicimos ya en la sesión anterior), y que es sumamente flexible. Vimos también un ejemplo de cómo crear un documento Quarto y un poco de cómo interactuar con él. Ahora entremos a todos los detalles. Retomemos nuestro documento de ejemplo (Figure 2.11).\n\n2.3.1 Preámbulo\nEl primer elemento es el preámbulo, que mencionamos está en formato YAML y que está contenido entre ---. YAML es un formato de serialización de datos legible por humanos. ¿En castellano? Una lista con niveles de pares de claves:valores que definen los metadatos de nuestro documento. En nuestro ejemplo tenemos:\n---\ntitle: \"Untitled\"\n---\nEs decir, el título que aparecerá en el reporte es \"Untitled\", tal y como vimos en la vista previa. Esto no tiene mucho sentido, así que cambiémoslo por \"Mi primer Quarto\" y añadamos una nueva entrada para el autor, tal que:\n---\ntitle: \"Mi primer Quarto\"\nauthor: \"Tu nombre\"\n---\nOtro elemento que usualmente se agrega en el preámbulo es el formato de salida del documento renderizado; es decir, ya presentado para compartir/imprimir. Mi recomendación es exportar a archivos HTML, salvo que vayas a imprimir el documento (PDF), necesites paginación (PDF de nuevo) o que por alguna desafortunada razón necesites un archivo MS Word. Un HTML lo declaramos tal que:\n---\ntitle: \"Mi primer Quarto\"\nauthor: \"Tu nombre\"\nformat:\n  html:\n    code-fold: true\n---\nNotarás algunas cosas. La primera es que html está indentado; es decir, no comienza en la misma posición que format. Esto es para indicar que html pertenece a format, al igual que code-fold pertenece a html. La siguiente es, justamente, que agregamos a la lista la entrada code-fold. Esta es una opción que indica si queremos que el código sea colapsable mediante un botón en el archivo final. En este caso, la indicamos como true, por lo que así será. Si no lo quisiéramos así indicaríamos false. Si renderizamos nuestro documento ahora tendremos:\n\n\n\nFigure 2.20: Primer Quarto renderizado\n\n\nSi tienes curiosidad por saber qué características YAML dieron lugar al libro de acompañamiento, puedes revisar el archivo _quarto.yml.\n\n\n2.3.2 Markdown\nPasando el preámbulo tenemos una sección de texto libre, con algunas anotaciones para el formato del texto. Estas anotaciones están hechas en lenguaje markdown. Markdown es un “lenguaje de programación para textos” y permite hacer cosas bastante interesantes. Las anotaciones más básicas son:\n\nEncabezados y secciones: #, ##, ###, ####, etc.\n*Itálicas* : Itálicas\n**Itálicas**: Negritas\n`Código`: Código\nHipervínculos: [Google](https://www.google.com): Google\n$y_i = \\alpha + \\beta*x_i + \\epsilon$: \\(y_i = \\alpha + \\beta*x_i + \\epsilon\\)\n\nPuedes hacer listas numeradas, como la anterior, o listas sin numerar:\n\nElemento\nOtro elemento\n\nE, incluso, puedes hacer listas anidadas añadiendo una indentación de doble tabulación a los elementos anidados:\n\nIntroducción a RStudio y Quarto\n\nR vs. RStudio\nIDE RStudio\n\n\nEn el archivo .qmd este capítulo puedes ver cómo cómo añadir imágenes, pero es básicamente el mismo procedimiento que con un enlace, salvo el añadir el operador ! antes. Por ejemplo, esta línea añade el logo de R desde su dirección oficial, le asigna el pie de foto “Logo R” y una etiqueta interna que se puede utilizar para referencias cruzadas (Figure 2.21) con @fig-logoR :\n![Logo `R`](https://www.r-project.org/logo/Rlogo.png){#fig-logoR}\n\n\n\nFigure 2.21: Logo R\n\n\n\n\n2.3.3 Referencias y citas\nPodemos agregar referencias, siempre y cuando estas estén contenidas en un archivo .bib como el archivo references.bib que está en este directorio y, por supuesto, referenciarlas en el texto (e.g. knuth84?). Si estás viendo la página web con este material, pasa tu cursor sobre la cita y notarás como aparece la información bibliográfica completa. Este archivo .bib está compuesto por entradas en formato bibTeX, heredado del hermano mayor de Markdown: LaTeX. La sintaxis básica es la siguiente:\n@TIPO{CLAVE,\n      author = {},\n      year = {},\n      title = {}}\nLos campos adicionales dependerán del TIPO de referencia que se esté añadiendo y si quieres ver todas las posibilidades te recomiendo revisar esta página. Para incluir una referencia cruzada lo único que tienes que hacer es: @CLAVE. Si tomamos como ejemplo el artículo de Knuth de 1984 sobre la programación literal sería @Knuth_1984 para una referencia en el texto, Knuth (1984), o [@Knuth_1984] para una referencia dentro de paréntesis (Knuth 1984). En cualquiera de los dos casos, si estás viendo el material renderizado, asegúrate de pasar el cursor sobre las citas, y verás que aparece toda la referencia bibliográfica. Para agregar la lista de referencias al final del texto, debes de agregar: el siguiente divisor debajo de un encabezado de referencias:\n::: {#refs}\n:::\n\n\n2.3.4 Consideraciones sobre Quarto\nAunque Quarto es extremadamente potente y flexible, es importante tener presente algunas cosas. La primera es que NO hay manera de que en esta sesión yo pueda explicarte con lujo de detalle todas las funciones, para eso prefiero dirigirte a la (bastante extensa) guía de Quarto. Otra consideración es que, aunque puedes exportar tus documentos como PDF, Word o ePUB u otros, mi recomendación es que siempre que tengas la libertad exportes a un HTML, que es un poco más permisivo con líneas de código muy largas, o al mostrar tablas con muchas columnas. Si NECESITAS un PDF asegúrate de tener instalada alguna distribución de LaTeX o, si no quieres la instalación completa, cuando menos asegurarte de haber instalado tinytex como lo hicimos en la sesión de preparación, de lo contrario NO podrás exportar tus reportes a PDF."
  },
  {
    "objectID": "s0_preparacion.html",
    "href": "s0_preparacion.html",
    "title": "Preparación",
    "section": "",
    "text": "Antes de entrar al contenido del curso es necesario asegurarnos de que tengas instalados todos los programas y extensiones requeridos. Vayamos uno a uno"
  },
  {
    "objectID": "s0_preparacion.html#r",
    "href": "s0_preparacion.html#r",
    "title": "Preparación",
    "section": "R",
    "text": "R"
  },
  {
    "objectID": "s0_preparacion.html#rstudio",
    "href": "s0_preparacion.html#rstudio",
    "title": "Preparación",
    "section": "RStudio",
    "text": "RStudio"
  },
  {
    "objectID": "s0_preparacion.html#quarto-y-tinytex",
    "href": "s0_preparacion.html#quarto-y-tinytex",
    "title": "Preparación",
    "section": "Quarto y tinytex",
    "text": "Quarto y tinytex"
  },
  {
    "objectID": "s0_preparacion.html#xquartz",
    "href": "s0_preparacion.html#xquartz",
    "title": "Preparación",
    "section": "xquartz",
    "text": "xquartz"
  },
  {
    "objectID": "c02_intro_rs.html#ejercicio",
    "href": "c02_intro_rs.html#ejercicio",
    "title": "2  Introducción a RStudio y Quarto",
    "section": "2.4 Ejercicio",
    "text": "2.4 Ejercicio\nUtilizando Quarto genera un documento HTML con tabla de contenidos en el que te presentes. Las características son:\n\nTítulo: tu nombre\nIncluye tu correo electrónico en el preámbulo\nIncluye las secciones:\n\nGrado académico e institución de procedencia\nMotivación para tomar el curso\nExpectativas sobre el curso (¿hay alguna técnica particular que quieras aprender/revisar?)\nLibro(s) favorito(s) (como cita(s) en el texto, incluyendo la(s) referencia(s) completa(s) al final del documento)\nVentana de RStudio. No importa si es con los ajustes por defecto, si la pusiste igual a la mía o si pusiste un tema con colores estridentes."
  },
  {
    "objectID": "c03_bases_r.html",
    "href": "c03_bases_r.html",
    "title": "3  Bases de R",
    "section": "",
    "text": "En la sesión anterior hablamos de RStudio como una interfaz gráfica a R, pero no fuimos más allá de decir que R es un lenguaje de programación que se ejecuta en consola. Pues bien, R es, y cito textualmente, “un lenguaje y ambiente para la computación estadística y la creación de gráficos”. ¿En castellano? Es un lenguaje creado especialmente para procedimientos estadísticos y el graficado de datos. Es un software libre, por lo que además de ser gratuito es auditable (i.e., cualquiera puede revisar el código fuente), “cualquiera” puede contribuir (ojo a las comillas). En su código fuente base (R base) incluye diversos algoritmos, modelos y distribuciones de probabilidad, aunque también es fácilmente extensible por medio de paquetes o librerías.\nEn este punto me dirás “Ok, Arturo, de acuerdo con lo que dices, pero ¿por qué se ha vuelto tan popular en análisis bioestadísticos?” Pues tiene que ver con varios factores. El primero es que es un lenguaje de alto nivel; es decir, está hecho para ser leído por humanos y no por computadoras. El segundo es que es interactivo, por lo que podemos ir modificando el código y ver su salida en tiempo real sin necesidad de compilar primero el código. El tercer"
  },
  {
    "objectID": "c03_bases_r.html#objetos",
    "href": "c03_bases_r.html#objetos",
    "title": "3  Bases de R",
    "section": "3.2 Objetos",
    "text": "3.2 Objetos\nR es un lenguaje en el cual domina el paradigma de la programación orientada a objetos; i.e., en R todo es un objeto. El método de creación es el mismo para todos los casos: utilizar el símbolo de asignación <- (atajo de teclado alt -). Como ejemplo, creemos un objeto que contenga el texto “¡Hola Mundo!”:\n\ntexto <- \"¡Hola mundo!\"\n\nNotarás que no hubo salida ni en la libreta ni en la consola. Esto quiere decir que el objeto fue creado satisfactoriamente, y ahora podemos acceder o utilizar ese texto llamando al objeto texto:\n\ntexto\n\n[1] \"¡Hola mundo!\"\n\n\n\n3.2.1 Consideraciones\nAunque podemos poner virtualmente cualquier nombre a nuestros objetos, es necesario que tengamos algunas cosas en cuenta:\n\nNo empezar nombres de objetos con números.\nNo utilizar nombres de funciones u otros objetos creados anteriormente: enmascaramiento (funciones) o sobre-escritura (variables)\nEvitar empezar con punto (.), pues el objeto queda oculto del ambiente de trabajo\nUtilizar nombres cortos, pero lo más descriptivos posibles (amundsen_plot >> plot)\nSe pueden utilizar _ o . dentro del nombre (como separadores, por ejemplo). La guía de estilo de R sugiere el uso de _, aunque la guía de estilo de Google para R sugiere el uso de CamelCase (AmundsenPlot). Lo más importante para uso personal/interno es ser consistente y evitar mezclar estilos."
  },
  {
    "objectID": "c03_bases_r.html#librerías-y-funciones",
    "href": "c03_bases_r.html#librerías-y-funciones",
    "title": "3  Bases de R",
    "section": "3.3 Librerías y funciones",
    "text": "3.3 Librerías y funciones\nAunque en R predomina el paradigma de la programación orientada a objetos, también podemos hacer uso del paradigma funcional de la programación; es decir, podemos construir nuestros programas mediante la aplicación y construcción de funciones. Aunque en este momento te suene poco intuitivo o como si estuviéramos comenzando por el final, vamos a comenzar con las funciones, para después hablar de los tipos de objetos que tenemos, pues resulta que para crear cierto tipo de objetos necesitamos utilizar funciones.\n\n3.3.1 Funciones\nLas funciones representan una serie de métodos para obtener un resultado, para utilizarlas emplearemos la estructura fun(arg1, arg2, ..., argn), donde arg*representa un argumento; es decir, un elemento “pasado” a la función para regular sus procesos. El ejemplo más simple, y con el cuál ya hemos estado en contacto, es la función print():\n\nprint(\"¡Hola Mundo!\")\n\n[1] \"¡Hola Mundo!\"\n\n\nEsta función “imprime” un resultado en pantalla, pero puede ser utilizada para mucho más que para imprimir texto. A final de cuentas, este mismo resultado lo podemos obtener simplemente poniendo el texto en la consola. ¿Qué puede hacer la función? Eso lo podemos ver consultando la ayuda de la función, utilizando el operador ? antes del nombre, tal que:\n\n?print\n\nTe darás cuenta que no tenemos una salida en la libreta, lo cuál es normal, pues la ayuda tiene su propio espacio en el ambiente gráfico. Si estuviéramos trabajando solo con la línea de comandos en el terminal, ahí sí veríamos la salida en la consola. Una de las partes más importantes de la documentación de ayuda es que tenemos los argumentos de la función; es decir, qué necesita la función para realizar su trabajo, así como el papel de cada uno de estos elementos.\nPor otra parte, cuando declaramos una función los llamaremos parámetros. Para declarar una función generaremos una variable cuyo nombre será el nombre “llamable” de la función, a la cual asignaremos el cuerpo de la función utilizando function(parámetros){cuerpo}. Para ejemplificar, creemos una función para calcular la media aritmética de un conjunto de números x:\n\nmedia.arit <- function(x){\n  # Mejora: Trabajo con NAs\n  suma <- sum(x)\n  n <- length(x)\n  return(suma/n)\n}\n\nmedia.arit(1:5)\n\n[1] 3\n\n\n¿Cuándo declarar una función? Cuando tengamos un flujo de trabajo que consista de exactamente los mismos pasos con posibles pequeñas variaciones, el cuál aplicaremos de manera continua. De hecho, uno de los productos que obtendremos de estas reuniones será un script con las funciones relacionadas con los análisis tróficos IIR, PSIRI, gráficos de Amundsen, etc. para que puedan ser utilizados de manera sencilla, repetitiva, y consistente.\nPor último, debido a que un gran número de funciones son altamente regulables (cuentan con un gran número de parámetros), te recomiendo hacer uso extensivo (excesivo) de la ayuda (?fun) para que obtengas de primera mano el conocimiento sobre su objetivo, sus entradas, su salida y, en consecuencia, ayudarte a prevenir o solucionar errores.\n\n\n3.3.2 Librerías\nAfortunadamente para nostros, muchas de las técnicas o procedimientos que realizamos ya fueron programados por alguien con más experiencia, y usualmente compilados en una librería de R. Hay una gran cantidad de librerías disponibles, algunas instalables directamente desde CRAN (R), mientras que otras son instalables desde repositorios públicos como GitHub. Por lo general, la gran mayoría las instalaremos desde R, utilizando la función install.packages(\"package\", dependencies = T). Esta función buscará la versión más reciente del paquete solicitado y la descargará e instalará para que pueda ser utilizada por nosotros. Un ejemplo:\ninstall.packages(\"tidyverse\", dependencies = T)\nEsta línea descargará el paquete tidyverse, que es un paquete formado por muchos otros paquetes que forman un “dialecto” dentro de R. Por el momento no te preocupes por eso, solo lo instalamos para evitarnos muchas descargas independientes de paquetes que pueden llegar a serte extremadamente útiles, tal como ggplot2. Es importante mencionar que una cosa es instalar la librería y otra cosa es utilizar la librería, para lo cual necesitamos de la función library(package), tal que:\n\nlibrary(ggplot2)\n\nUna vez que hicimos esto ya podemos utilizar TODAS las funciones que forman parte de la librería. ¿Y si solo quiero utilizar una función particular? En ese caso puedes utilizar el operador ::. Probemos viendo la ayuda de la función str_extract de la librería stringr que forma parte del tidyverse:\n\n?stringr::str_extract\n\nAhora que sabemos qué es una función, qué es una librería y cómo utilizarlos, vayamos a explorar el otro tipo de objetos: las variables."
  },
  {
    "objectID": "c03_bases_r.html#variables",
    "href": "c03_bases_r.html#variables",
    "title": "3  Bases de R",
    "section": "3.4 Variables",
    "text": "3.4 Variables\nA diferencia de una función en la cual almacenamos series de pasos para obtener un resultado, una variable nos permite almacenar todo lo demás: resultados, números, texto, tablas, e incluso otras variables. Su declaración la vimos arriba: con el símbolo de asignación (<-). Para imprimir el resultado en pantalla podemos llamar a la variable o utilizar la función print(var):\n\nvar <- 1:5\nprint(var)\n\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "c03_bases_r.html#tipos-de-variables",
    "href": "c03_bases_r.html#tipos-de-variables",
    "title": "3  Bases de R",
    "section": "3.5 Tipos de variables",
    "text": "3.5 Tipos de variables\nExisten dos tipos de variables, los cuales a su vez se subdividen en otros tipos. Para conocer el tipo de una variable utilizamos la función typeof(var), mientras que las funciones is.*() nos permiten probar si una variable es de un tipo en específico (e.g. is.character(var)).\n\n3.5.1 Datos\nLas variables que contienen un solo elemento se conocen como datos:\n\nCharacter: Cadena de caracteres, indicadas por comillas dobles o sencillas:\n\n\nchar <- \"a\"\ntypeof(char)\n\n[1] \"character\"\n\n\n\nInteger: Números enteros, indicados por la letra “L” después del número:\n\n\ninteger <- 5L\ntypeof(integer)\n\n[1] \"integer\"\n\n\n\nDouble: Fracciones, también conocidos como floating points:\n\n\ndbl <- 7/5\ntypeof(dbl)\n\n[1] \"double\"\n\n\n\nLogical: Valor lógico o booleano. Solo puede tomar dos valores: TRUE o FALSE o sus abreviaturas T o F\n\n\nbool <- is.double(dbl)\nprint(paste('valor: ', bool))\n\n[1] \"valor:  TRUE\"\n\nprint(paste('tipo: ', typeof(bool)))\n\n[1] \"tipo:  logical\"\n\n\n\nComplex: Números complejos, con una parte real y una imaginaria:\n\n\ncomp.n <- 8+3i\ntypeof(comp.n)\n\n[1] \"complex\"\n\n\n\n\n3.5.2 Estructuras/arreglos\nLas estructuras son colecciones de valores, cada una con sus propiedades y sus métodos de acceso a los valores que las conforman (indexación/indización):\n\n3.5.2.1 Vector\nLa estructura más básica. Una colección unidimensional de elementos. Las funciones para crearlos son: c(), la cual combina una serie de elementos en un vector (mismo tipo) o una lista (diferentes tipos); vector(mode, length): genera un vector “vacío” con longitud (número de elementos) length y tipo de datos 'mode'.\n\nvect.1 <- c(1:5)\nvect.2 <- vector(mode = 'double', length = 5)\nprint(vect.1)\n\n[1] 1 2 3 4 5\n\nprint(vect.2)\n\n[1] 0 0 0 0 0\n\n\nPara indexar un vector utilizamos: var[i], donde i representa la posición del (los) elemento(s) de interés:\n\nprint(vect.1[4])\n\n[1] 4\n\nprint(vect.1[2:3])\n\n[1] 2 3\n\n\n\n\n3.5.2.2 Factor\nRepresentan variables categoricas. Contienen los valores de la variable así como los valores posibles que puede tomar (niveles). Se crean con la función factor(x, levels, labels), donde x representa los valores de la variable, levels representa los posibles niveles y labels (opcional) representan etiquetas de cada nivel:\n\nfact.1 <- factor(x = c('a', 'b', 'c'), \n                 levels = c('a', 'b', 'c', 'd', 'e'))\nfact.1\n\n[1] a b c\nLevels: a b c d e\n\n\n\n\n3.5.2.3 Matrix\nUna estructura bidimensional (columnas/renglones). Se generan utilizando la función matrix(data, nrow, ncol, byrow), donde data representa la colección de objetos que formarán la matriz, nrow y ncol el número de renglones y columnas, respectivamente, y byrow si se llenará por renglones (FALSE) o por columnas (TRUE, por defecto)\n\nmat.1 <- matrix(c(T, F, F, T), nrow = 2, ncol = 2)\nmat.1\n\n      [,1]  [,2]\n[1,]  TRUE FALSE\n[2,] FALSE  TRUE\n\n\nPara indexar una matriz utilizaremos también corchetes; sin embargo, indicaremos el par renglón,columna donde se ubica el elemento:\n\nprint(mat.1[1,1])\n\n[1] TRUE\n\nprint(mat.1[2,1])\n\n[1] FALSE\n\n\nSi quisieramos indexar toda una dimensión (renglón o columna), utilizaríamos el mismo método, dejando en blanco la dimensión contraria; es decir, si nos interesa una columna, dejaremos en blanco el número de renglón y si nos interesa un renglón dejaremos en blanco el número de columna:\n\nprint(mat.1[,2])\n\n[1] FALSE  TRUE\n\nprint(mat.1[1,])\n\n[1]  TRUE FALSE\n\n\nOJO: print(mat.1[c(1,1)]) NO da la diagonal de la matriz, esa la obtenemos con diag(mat1), sino que repite 2 veces el primer elemento de la matriz\n\nmat.1[c(2,1),1]\n\n[1] FALSE  TRUE\n\n\n\n\n3.5.2.4 DataFrame\nEl DataFrame es la estructura con la que más comúnmente estaremos en contacto. Es una tabla completa que, a diferencia de la matriz, contiene nombres de columnas. Tiene dos particularidades que hay que considerar: 1) todos los elementos que forman a cada columna deberán ser del mismo tipo y 2) El número de renglones de todas las columnas debe de ser el mismo. Se crean utilizando la función data.frame(col.name = data, ...):\n\ndf.1 <- data.frame(col.a = c(0:5), \n                   col.b = c(20:25), \n                   col.c = c(15:20))\n# Nota: Si no se indica el nombre de las columnas este será asignado automáticamente\ndf.1\n\n  col.a col.b col.c\n1     0    20    15\n2     1    21    16\n3     2    22    17\n4     3    23    18\n5     4    24    19\n6     5    25    20\n\n\nExisten distintos modos de indexar un DataFrame. El primero de ellos var$col.name:\n\ndf.1$col.a\n\n[1] 0 1 2 3 4 5\n\n\nEjercicio renglones 1 y 4 de la columna c:\n\ndf.1$col.c[c(1,4)]\n\n[1] 15 18\n\n\nComo vemos, este modo de indexación extrae la columna completa en forma de un vector, por lo que si queremos accesar un valor en particular solo habrá que utilizar ese método de indexación:\n\ndf.1$col.b[4]\n\n[1] 23\n\n\nFinalmente, también podemos utilizar el método de indexación de matrices, recordando que se especifica el par renglón, columna:\n\ndf.1[4,2]\n\n[1] 23\n\n\nEsta es la estructura con la que más debemos de familiarizarnos, pues la mayor parte de nuestros datos los representamos en ella. ¿Siempre debemos de ingresar los datos manualmente? Para nada, tenemos todo un abanico de funciones que nos permiten cargar datos directamente de archivos, pero eso lo veremos más adelante.\n\n\n3.5.2.5 List\nLas listas son una colección de cualquier combinación de datos o estructuras, incluyendo otras listas:\n\nl.1 <- list(df.1, mat.1, vect.1)\nprint(l.1)\n\n[[1]]\n  col.a col.b col.c\n1     0    20    15\n2     1    21    16\n3     2    22    17\n4     3    23    18\n5     4    24    19\n6     5    25    20\n\n[[2]]\n      [,1]  [,2]\n[1,]  TRUE FALSE\n[2,] FALSE  TRUE\n\n[[3]]\n[1] 1 2 3 4 5\n\n\nEn la salida de arriba vemos el método de indexación: var[[i]][j,k], donde i representa el número de objeto en la lista y j,k el par renglón,columna (de aplicar). En el caso de DataFrames podemos seguir utilizando el operador $ para utilizar los noombres de columnas:\n\nl.1[[1]]$col.a[6]\n\n[1] 5\n\n\nAhora que hemos hablado de todos los tipos de estructuras, y antes de encaminarnos hacia los procesos de automatización, hablemos de cómo cargar nuestros datos en R.\nEjercicios:\n\nl.1[[2]][2,2]\n\n[1] TRUE\n\nl.1[[3]][5]\n\n[1] 5\n\nl.1[[1]]$col.b[3:4]\n\n[1] 22 23\n\nl.1[[1]]$col.a[c(6,1)]\n\n[1] 5 0"
  },
  {
    "objectID": "c03_bases_r.html#carga-de-datos",
    "href": "c03_bases_r.html#carga-de-datos",
    "title": "3  Bases de R",
    "section": "3.6 Carga de datos",
    "text": "3.6 Carga de datos\nEl cómo carguemos nuestros datos depende de varios factores: a) el formato del archivo en el que estén archivados, b) el cómo esté acomodada la información, c) qué necesitemos para hacer los análisis posteriores. El ejemplo más simple es cargar un archivo de texto separado por comas, en el cuál las comas separan las columnas y los saltos de línea los renglones. Tomemos como ejemplo el archivo \"datos1.csv\":\n\ndatos1 <- read.table(\"datos/datos1.csv\", sep = \",\", header = T)\n\nPodemos verificar la información obteniendo el encabezado del data.frame:\n\nhead(datos1)\n\n  sp st habitat Alpheus_lottini Alpheus_spp Alpheus_umbo Amphipods\n1 Cu  1       C               0           0            0         0\n2 Cu  2       C               0           4            0         0\n3 Cu  3       C               0           0            0         0\n4 Cz  1       C               0           0            0         6\n5 Ar  1       C               0           0            0         0\n6 Ps  1       C               0           0            0         0\n  Apogon_retrosella Appendicularians Axoclinus_nigricaudis Bittium_cerralvoense\n1                 0                0                     0                    0\n2                 0                0                     0                    0\n3                 0                0                     0                    0\n4                 0                0                     0                    0\n5                 0                0                     0                    0\n6                 0                0                     0                    0\n  Chaetognaths Cirripedia_Chthamalus_anisopoma. Cladocerans_Penila_avirostris\n1            0                                0                             0\n2            0                                0                             0\n3            0                                0                             0\n4            0                                0                             0\n5            0                                0                             0\n6            0                                0                             0\n  Cladocerans_Pseudovadne_tergestina Copepods_Acartia_clausi\n1                                  0                       9\n2                                  0                       0\n3                                  0                       0\n4                                  0                       8\n5                                  0                       0\n6                                  0                       0\n  Copepods_Calanus_pacificus Epitonium_canna Fish_eggs foraminifera\n1                          0               0         0            0\n2                          0               0         0            0\n3                          0               0         0            0\n4                          0               0        13            0\n5                          0               0         0            0\n6                          0               0         0            0\n  Gnathophyllum_panamense Hidrozoa Ichtyoplankton Larvae_crustaceans_megalopa\n1                       0        0              6                           0\n2                       2        0              0                           0\n3                       0        0              0                           0\n4                       0        0              0                           0\n5                       0        0              0                           0\n6                       0        0              0                           0\n  larvae_crustaceans_zoea Liomera_cinctimana Litiopa_melanostoma Mysid\n1                       0                  0                   0     0\n2                       0                  0                   0     0\n3                       0                  0                   0     0\n4                       0                  0                   0     0\n5                       0                  0                   0     0\n6                       0                  0                   0     0\n  Mytella_arciformis Mytella_tumbezensis Nanocassiope_polita\n1                  0                   0                   0\n2                  0                   0                   0\n3                  0                   0                   0\n4                  0                   0                   0\n5                  0                   0                   0\n6                  0                   0                   0\n  Nyctiphanes_simplex Ostracods Otoliths Palaemon_ritter Panopeus_purpureus\n1                   0         0        0               0                  0\n2                   0         0        0               0                  0\n3                   0         0        0               2                  0\n4                   0         0        0               0                  0\n5                   0         0        0               0                  0\n6                  15         0        0               0                  0\n  Parviturbo_acuticostatus Parviturbo_erici Parviturbo_spp Pteropods\n1                        0                0              0         0\n2                        0                0              0         0\n3                        0                0              0         0\n4                        0                0              0         0\n5                        0                0              0         0\n6                        0                0              0         0\n  Quadrella_nitida Tagelus_californianus Tegula_globulus Tegula_mariana\n1                0                     0               0              0\n2                0                     0               0              0\n3                0                     0               0              0\n4                0                     0               0              0\n5                0                     0               0              2\n6                0                     0               0              0\n  Tellina_coani. Trapezia_bidentata Trapezia_formosa Trapezia_spp\n1              0                  0                0            0\n2              0                  0                0            0\n3              0                  0                0            0\n4              0                  0                0            0\n5              0                  0                0            0\n6              0                  0                0            0\n  Ulva_dactylifera Ulva_lactuca Ulva_spp UOM..Unidentified.Organic.Material.\n1                0            0        0                                   0\n2                0            0        0                                   0\n3                0            0        0                                   0\n4                0            0        0                                   0\n5                0            0        0                                   0\n6                0            0        0                                   0\n\n\nLos archivos separados por comas son uno de los formatos más comunes, por lo que R cuenta con una función dedicada (la función read.table() con valores predefinidos):\n\ndatos1 <- read.csv(\"datos/datos1.csv\")\nhead(datos1)\n\n  sp st habitat Alpheus_lottini Alpheus_spp Alpheus_umbo Amphipods\n1 Cu  1       C               0           0            0         0\n2 Cu  2       C               0           4            0         0\n3 Cu  3       C               0           0            0         0\n4 Cz  1       C               0           0            0         6\n5 Ar  1       C               0           0            0         0\n6 Ps  1       C               0           0            0         0\n  Apogon_retrosella Appendicularians Axoclinus_nigricaudis Bittium_cerralvoense\n1                 0                0                     0                    0\n2                 0                0                     0                    0\n3                 0                0                     0                    0\n4                 0                0                     0                    0\n5                 0                0                     0                    0\n6                 0                0                     0                    0\n  Chaetognaths Cirripedia_Chthamalus_anisopoma. Cladocerans_Penila_avirostris\n1            0                                0                             0\n2            0                                0                             0\n3            0                                0                             0\n4            0                                0                             0\n5            0                                0                             0\n6            0                                0                             0\n  Cladocerans_Pseudovadne_tergestina Copepods_Acartia_clausi\n1                                  0                       9\n2                                  0                       0\n3                                  0                       0\n4                                  0                       8\n5                                  0                       0\n6                                  0                       0\n  Copepods_Calanus_pacificus Epitonium_canna Fish_eggs foraminifera\n1                          0               0         0            0\n2                          0               0         0            0\n3                          0               0         0            0\n4                          0               0        13            0\n5                          0               0         0            0\n6                          0               0         0            0\n  Gnathophyllum_panamense Hidrozoa Ichtyoplankton Larvae_crustaceans_megalopa\n1                       0        0              6                           0\n2                       2        0              0                           0\n3                       0        0              0                           0\n4                       0        0              0                           0\n5                       0        0              0                           0\n6                       0        0              0                           0\n  larvae_crustaceans_zoea Liomera_cinctimana Litiopa_melanostoma Mysid\n1                       0                  0                   0     0\n2                       0                  0                   0     0\n3                       0                  0                   0     0\n4                       0                  0                   0     0\n5                       0                  0                   0     0\n6                       0                  0                   0     0\n  Mytella_arciformis Mytella_tumbezensis Nanocassiope_polita\n1                  0                   0                   0\n2                  0                   0                   0\n3                  0                   0                   0\n4                  0                   0                   0\n5                  0                   0                   0\n6                  0                   0                   0\n  Nyctiphanes_simplex Ostracods Otoliths Palaemon_ritter Panopeus_purpureus\n1                   0         0        0               0                  0\n2                   0         0        0               0                  0\n3                   0         0        0               2                  0\n4                   0         0        0               0                  0\n5                   0         0        0               0                  0\n6                  15         0        0               0                  0\n  Parviturbo_acuticostatus Parviturbo_erici Parviturbo_spp Pteropods\n1                        0                0              0         0\n2                        0                0              0         0\n3                        0                0              0         0\n4                        0                0              0         0\n5                        0                0              0         0\n6                        0                0              0         0\n  Quadrella_nitida Tagelus_californianus Tegula_globulus Tegula_mariana\n1                0                     0               0              0\n2                0                     0               0              0\n3                0                     0               0              0\n4                0                     0               0              0\n5                0                     0               0              2\n6                0                     0               0              0\n  Tellina_coani. Trapezia_bidentata Trapezia_formosa Trapezia_spp\n1              0                  0                0            0\n2              0                  0                0            0\n3              0                  0                0            0\n4              0                  0                0            0\n5              0                  0                0            0\n6              0                  0                0            0\n  Ulva_dactylifera Ulva_lactuca Ulva_spp UOM..Unidentified.Organic.Material.\n1                0            0        0                                   0\n2                0            0        0                                   0\n3                0            0        0                                   0\n4                0            0        0                                   0\n5                0            0        0                                   0\n6                0            0        0                                   0\n\n\nAquí todo se cargó sin ningún problema porque el archivo estaba listo para ser leído, pero esto no siempre es el caso. Por ejemplo, los datos pueden estar en la segunda hoja de un archivo Excel, la cuál tiene 5 renglones de encabezado dando una descripción de los datos y en el renglón 6 están dispuestos los nombres de las variables. Además, sabemos que vamos a realizar un análisis de agrupamientos jerárquicos (clúster), el cuál requiere que los nombres de los individuos estén marcados en los nombres de los renglones (Ver archivo datos2.xlsx):\n\ndatos2 <- read.table(\"datos/datos2.xlsx\")\n\nEsto, evidentemente, da un error, pues le dimos a la función read.table() un archivo que no es de texto simple, sino un Excel.\nVamos entonces por partes:\n\nFormato: es un archivo Excel, por lo que hay que utilizar una función que permita leer ese tipo de archivo. En nuestro caso utilizaremos la función readxl::read_xlsx(). Aquí no obtendremos ningún error, pues el tipo de archivo es el correcto. Lo único que obtenemos es un mensaje (New names:) que nos diría a qué columnas se les asignó nombres nuevos (y cuáles).\n\n\ndatos2 <- readxl::read_xlsx(\"datos/datos2.xlsx\")\n\nNew names:\n• `Lp14-C` -> `Lp14-C...94`\n• `Lp14-C` -> `Lp14-C...109`\n\n\nPero, ¿qué pasa si leemos el encabezado? Resulta que la función cargó la primera hoja del excel, cuando en realidad nosotros queríamos la segunda\n\nhead(datos2)\n\n# A tibble: 6 × 256\n  Prey   `Cu1-C` `Cu2-C` `Cu3-C` `Cz1-C` `Ar1-C` `Ps1-C` `Cz2-C` `Cz3-C` `Ac1-C`\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Alphe…       0       0       0       0       0       0       0       0       0\n2 Alphe…       0       4       0       0       0       0       0       0       0\n3 Alphe…       0       0       0       0       0       0       0       0       0\n4 Amphi…       0       0       0       6       0       0       0       0       0\n5 Apogo…       0       0       0       0       0       0       0       0       0\n6 Appen…       0       0       0       0       0       0       0       0       0\n# … with 246 more variables: `Cu4-C` <dbl>, `Cu5-C` <dbl>, `Lp1-C` <dbl>,\n#   `Gc1-C` <dbl>, `Cz4-C` <dbl>, `Cu6-C` <dbl>, `Cu7-C` <dbl>, `Lp2-C` <dbl>,\n#   `Lp3-C` <dbl>, `Lp4-C` <dbl>, `Lp5-C` <dbl>, `Lp6-C` <dbl>, `Lp7-C` <dbl>,\n#   `Lp8-C` <dbl>, `Lp9-C` <dbl>, `Lp10-C` <dbl>, `Lp11-C` <dbl>,\n#   `Ac2-C` <dbl>, `Pm1-C` <dbl>, `Pm2-C` <dbl>, `Pm3-C` <dbl>, `Gc2-C` <dbl>,\n#   `Cz5-C` <dbl>, `Cz6-C` <dbl>, `Ar2-C` <dbl>, `Ar3-C` <dbl>, `Ar4-C` <dbl>,\n#   `Ar5-C` <dbl>, `Cz7-C` <dbl>, `Pm4-C` <dbl>, `Lp12-C` <dbl>, …\n\n\nNecesitamos entonces indicar explícitamente que queremos se cargue la segunda hoja:\n\ndatos2 <- readxl::read_xlsx(\"datos/datos2.xlsx\", sheet = 2)\n\nNew names:\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n• `` -> `...6`\n• `` -> `...7`\n• `` -> `...8`\n• `` -> `...9`\n• `` -> `...10`\n• `` -> `...11`\n• `` -> `...12`\n• `` -> `...13`\n• `` -> `...14`\n• `` -> `...15`\n• `` -> `...16`\n• `` -> `...17`\n• `` -> `...18`\n• `` -> `...19`\n• `` -> `...20`\n• `` -> `...21`\n• `` -> `...22`\n• `` -> `...23`\n• `` -> `...24`\n• `` -> `...25`\n• `` -> `...26`\n• `` -> `...27`\n• `` -> `...28`\n• `` -> `...29`\n• `` -> `...30`\n• `` -> `...31`\n• `` -> `...32`\n• `` -> `...33`\n• `` -> `...34`\n• `` -> `...35`\n• `` -> `...36`\n• `` -> `...37`\n• `` -> `...38`\n• `` -> `...39`\n• `` -> `...40`\n• `` -> `...41`\n• `` -> `...42`\n• `` -> `...43`\n• `` -> `...44`\n• `` -> `...45`\n• `` -> `...46`\n• `` -> `...47`\n• `` -> `...48`\n• `` -> `...49`\n• `` -> `...50`\n\nhead(datos2)\n\n# A tibble: 6 × 50\n  Datos de c…¹ ...2  ...3  ...4  ...5  ...6  ...7  ...8  ...9  ...10 ...11 ...12\n  <chr>        <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>\n1 Proyecto: E… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n2 Análisis de… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n3 Acomodo de … <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n4 Datos de fr… <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA> \n5 Clave        Alph… Alph… Alph… Amph… Apog… Appe… Axoc… Bitt… Chae… Cirr… Clad…\n6 Cu1-C        0     0     0     0     0     0     0     0     0     0     0    \n# … with 38 more variables: ...13 <chr>, ...14 <chr>, ...15 <chr>, ...16 <chr>,\n#   ...17 <chr>, ...18 <chr>, ...19 <chr>, ...20 <chr>, ...21 <chr>,\n#   ...22 <chr>, ...23 <chr>, ...24 <chr>, ...25 <chr>, ...26 <chr>,\n#   ...27 <chr>, ...28 <chr>, ...29 <chr>, ...30 <chr>, ...31 <chr>,\n#   ...32 <chr>, ...33 <chr>, ...34 <chr>, ...35 <chr>, ...36 <chr>,\n#   ...37 <chr>, ...38 <chr>, ...39 <chr>, ...40 <chr>, ...41 <chr>,\n#   ...42 <chr>, ...43 <chr>, ...44 <chr>, ...45 <chr>, ...46 <chr>, …\n\n\n\nSaltar renglones: Ya tenemos la hoja que nos interesa, el problema es que cargó el encabezado como renglones con observaciones, por lo que hay que saltarlos:\n\n\ndatos2 <- readxl::read_xlsx(\"datos/datos2.xlsx\",\n                            sheet = 2,\n                            skip = 5)\nhead(datos2)\n\n# A tibble: 6 × 50\n  Clave Alpheu…¹ Alphe…² Alphe…³ Amphi…⁴ Apogo…⁵ Appen…⁶ Axocl…⁷ Bitti…⁸ Chaet…⁹\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Cu1-C        0       0       0       0       0       0       0       0       0\n2 Cu2-C        0       4       0       0       0       0       0       0       0\n3 Cu3-C        0       0       0       0       0       0       0       0       0\n4 Cz1-C        0       0       0       6       0       0       0       0       0\n5 Ar1-C        0       0       0       0       0       0       0       0       0\n6 Ps1-C        0       0       0       0       0       0       0       0       0\n# … with 40 more variables: Cirripedia_Chthamalus_anisopoma <dbl>,\n#   Cladocerans_Penila_avirostris <dbl>,\n#   Cladocerans_Pseudovadne_tergestina <dbl>, Copepods_Acartia_clausi <dbl>,\n#   Copepods_Calanus_pacificus <dbl>, Epitonium_canna <dbl>, Fish_eggs <dbl>,\n#   foraminifera <dbl>, Gnathophyllum_panamense <dbl>, Hidrozoa <dbl>,\n#   Ichtyoplankton <dbl>, Larvae_crustaceans_megalopa <dbl>,\n#   larvae_crustaceans_zoea <dbl>, Liomera_cinctimana <dbl>, …"
  },
  {
    "objectID": "c03_bases_r.html#operaciones-comunes",
    "href": "c03_bases_r.html#operaciones-comunes",
    "title": "3  Bases de R",
    "section": "3.7 Operaciones comunes",
    "text": "3.7 Operaciones comunes\nComo ya vimos, no siempre vamos a obtener la información en el formato que necesitamos. Aunque podemos solventar algunas de estas carencias durante la carga de los archivos, a veces necesitamos “masajear” los datos o “manipularlos” para llevarlos a lo que las funciones que nos interesan nos piden. Tomemos como ejemplo los datos de la hoja número 1 del archivo datos2.xlsx:\n\ndatos3 <- readxl::read_xlsx(\"datos/datos2.xlsx\", sheet = 1)\n\nNew names:\n• `Lp14-C` -> `Lp14-C...94`\n• `Lp14-C` -> `Lp14-C...109`\n\nhead(datos3)\n\n# A tibble: 6 × 256\n  Prey   `Cu1-C` `Cu2-C` `Cu3-C` `Cz1-C` `Ar1-C` `Ps1-C` `Cz2-C` `Cz3-C` `Ac1-C`\n  <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Alphe…       0       0       0       0       0       0       0       0       0\n2 Alphe…       0       4       0       0       0       0       0       0       0\n3 Alphe…       0       0       0       0       0       0       0       0       0\n4 Amphi…       0       0       0       6       0       0       0       0       0\n5 Apogo…       0       0       0       0       0       0       0       0       0\n6 Appen…       0       0       0       0       0       0       0       0       0\n# … with 246 more variables: `Cu4-C` <dbl>, `Cu5-C` <dbl>, `Lp1-C` <dbl>,\n#   `Gc1-C` <dbl>, `Cz4-C` <dbl>, `Cu6-C` <dbl>, `Cu7-C` <dbl>, `Lp2-C` <dbl>,\n#   `Lp3-C` <dbl>, `Lp4-C` <dbl>, `Lp5-C` <dbl>, `Lp6-C` <dbl>, `Lp7-C` <dbl>,\n#   `Lp8-C` <dbl>, `Lp9-C` <dbl>, `Lp10-C` <dbl>, `Lp11-C` <dbl>,\n#   `Ac2-C` <dbl>, `Pm1-C` <dbl>, `Pm2-C` <dbl>, `Pm3-C` <dbl>, `Gc2-C` <dbl>,\n#   `Cz5-C` <dbl>, `Cz6-C` <dbl>, `Ar2-C` <dbl>, `Ar3-C` <dbl>, `Ar4-C` <dbl>,\n#   `Ar5-C` <dbl>, `Cz7-C` <dbl>, `Pm4-C` <dbl>, `Lp12-C` <dbl>, …\n\n\n\n3.7.1 Transposición\nEn estos datos las presas están en los renglones, y los individuos de los depredadores en las columnas. Aunque esta disposición no tiene fundamentalmente nada de malo, normalmente las instancias (observaciones individuales/réplicas) están en los renglones, y las variables (presas) en las columnas. Es necesario entonces tranponer los datos. Esto lo podemos hacer de manera sencilla con la función t():\n\nhead(t(datos3))\n\n      [,1]              [,2]          [,3]           [,4]       \nPrey  \"Alpheus_lottini\" \"Alpheus_spp\" \"Alpheus_umbo\" \"Amphipods\"\nCu1-C \"0\"               \"0\"           \"0\"            \"0\"        \nCu2-C \"0\"               \"4\"           \"0\"            \"0\"        \nCu3-C \"0\"               \"0\"           \"0\"            \"0\"        \nCz1-C \" 0\"              \" 0\"          \" 0\"           \" 6\"       \nAr1-C \"0\"               \"0\"           \"0\"            \"0\"        \n      [,5]                [,6]               [,7]                   \nPrey  \"Apogon_retrosella\" \"Appendicularians\" \"Axoclinus_nigricaudis\"\nCu1-C \"0\"                 \"0\"                \"0\"                    \nCu2-C \"0\"                 \"0\"                \"0\"                    \nCu3-C \"0\"                 \"0\"                \"0\"                    \nCz1-C \" 0\"                \" 0\"               \" 0\"                   \nAr1-C \"0\"                 \"0\"                \"0\"                    \n      [,8]                   [,9]           [,10]                            \nPrey  \"Bittium_cerralvoense\" \"Chaetognaths\" \"Cirripedia_Chthamalus_anisopoma\"\nCu1-C \"0\"                    \"0\"            \"0\"                              \nCu2-C \"0\"                    \"0\"            \"0\"                              \nCu3-C \"0\"                    \"0\"            \"0\"                              \nCz1-C \" 0\"                   \" 0\"           \" 0\"                             \nAr1-C \"0\"                    \"0\"            \"0\"                              \n      [,11]                           [,12]                               \nPrey  \"Cladocerans_Penila_avirostris\" \"Cladocerans_Pseudovadne_tergestina\"\nCu1-C \"0\"                             \"0\"                                 \nCu2-C \"0\"                             \"0\"                                 \nCu3-C \"0\"                             \"0\"                                 \nCz1-C \" 0\"                            \" 0\"                                \nAr1-C \"0\"                             \"0\"                                 \n      [,13]                     [,14]                        [,15]            \nPrey  \"Copepods_Acartia_clausi\" \"Copepods_Calanus_pacificus\" \"Epitonium_canna\"\nCu1-C \"9\"                       \"0\"                          \"0\"              \nCu2-C \"0\"                       \"0\"                          \"0\"              \nCu3-C \"0\"                       \"0\"                          \"0\"              \nCz1-C \" 8\"                      \" 0\"                         \" 0\"             \nAr1-C \"0\"                       \"0\"                          \"0\"              \n      [,16]       [,17]          [,18]                     [,19]     \nPrey  \"Fish_eggs\" \"foraminifera\" \"Gnathophyllum_panamense\" \"Hidrozoa\"\nCu1-C \"0\"         \"0\"            \"0\"                       \"0\"       \nCu2-C \"0\"         \"0\"            \"2\"                       \"0\"       \nCu3-C \"0\"         \"0\"            \"0\"                       \"0\"       \nCz1-C \"13\"        \" 0\"           \" 0\"                      \" 0\"      \nAr1-C \"0\"         \"0\"            \"0\"                       \"0\"       \n      [,20]            [,21]                         [,22]                    \nPrey  \"Ichtyoplankton\" \"Larvae_crustaceans_megalopa\" \"larvae_crustaceans_zoea\"\nCu1-C \"6\"              \"0\"                           \"0\"                      \nCu2-C \"0\"              \"0\"                           \"0\"                      \nCu3-C \"0\"              \"0\"                           \"0\"                      \nCz1-C \" 0\"             \" 0\"                          \" 0\"                     \nAr1-C \"0\"              \"0\"                           \"0\"                      \n      [,23]                [,24]                 [,25]   [,26]               \nPrey  \"Liomera_cinctimana\" \"Litiopa_melanostoma\" \"Mysid\" \"Mytella_arciformis\"\nCu1-C \"0\"                  \"0\"                   \"0\"     \"0\"                 \nCu2-C \"0\"                  \"0\"                   \"0\"     \"0\"                 \nCu3-C \"0\"                  \"0\"                   \"0\"     \"0\"                 \nCz1-C \" 0\"                 \" 0\"                  \" 0\"    \" 0\"                \nAr1-C \"0\"                  \"0\"                   \"0\"     \"0\"                 \n      [,27]                 [,28]                 [,29]                \nPrey  \"Mytella_tumbezensis\" \"Nanocassiope_polita\" \"Nyctiphanes_simplex\"\nCu1-C \"0\"                   \"0\"                   \"0\"                  \nCu2-C \"0\"                   \"0\"                   \"0\"                  \nCu3-C \"0\"                   \"0\"                   \"0\"                  \nCz1-C \" 0\"                  \" 0\"                  \" 0\"                 \nAr1-C \"0\"                   \"0\"                   \"0\"                  \n      [,30]       [,31]      [,32]             [,33]               \nPrey  \"Ostracods\" \"Otoliths\" \"Palaemon_ritter\" \"Panopeus_purpureus\"\nCu1-C \"0\"         \"0\"        \"0\"               \"0\"                 \nCu2-C \"0\"         \"0\"        \"0\"               \"0\"                 \nCu3-C \"0\"         \"0\"        \"2\"               \"0\"                 \nCz1-C \" 0\"        \" 0\"       \" 0\"              \" 0\"                \nAr1-C \"0\"         \"0\"        \"0\"               \"0\"                 \n      [,34]                      [,35]              [,36]           \nPrey  \"Parviturbo_acuticostatus\" \"Parviturbo_erici\" \"Parviturbo_spp\"\nCu1-C \"0\"                        \"0\"                \"0\"             \nCu2-C \"0\"                        \"0\"                \"0\"             \nCu3-C \"0\"                        \"0\"                \"0\"             \nCz1-C \" 0\"                       \" 0\"               \" 0\"            \nAr1-C \"0\"                        \"0\"                \"0\"             \n      [,37]       [,38]              [,39]                   [,40]            \nPrey  \"Pteropods\" \"Quadrella_nitida\" \"Tagelus_californianus\" \"Tegula_globulus\"\nCu1-C \"0\"         \"0\"                \"0\"                     \"0\"              \nCu2-C \"0\"         \"0\"                \"0\"                     \"0\"              \nCu3-C \"0\"         \"0\"                \"0\"                     \"0\"              \nCz1-C \" 0\"        \" 0\"               \" 0\"                    \" 0\"             \nAr1-C \"0\"         \"0\"                \"0\"                     \"0\"              \n      [,41]            [,42]           [,43]                [,44]             \nPrey  \"Tegula_mariana\" \"Tellina_coani\" \"Trapezia_bidentata\" \"Trapezia_formosa\"\nCu1-C \"0\"              \"0\"             \"0\"                  \"0\"               \nCu2-C \"0\"              \"0\"             \"0\"                  \"0\"               \nCu3-C \"0\"              \"0\"             \"0\"                  \"0\"               \nCz1-C \" 0\"             \" 0\"            \" 0\"                 \" 0\"              \nAr1-C \"2\"              \"0\"             \"0\"                  \"0\"               \n      [,45]          [,46]              [,47]          [,48]     \nPrey  \"Trapezia_spp\" \"Ulva_dactylifera\" \"Ulva_lactuca\" \"Ulva_spp\"\nCu1-C \"0\"            \"0\"                \"0\"            \"0\"       \nCu2-C \"0\"            \"0\"                \"0\"            \"0\"       \nCu3-C \"0\"            \"0\"                \"0\"            \"0\"       \nCz1-C \" 0\"           \" 0\"               \" 0\"           \" 0\"      \nAr1-C \"0\"            \"0\"                \"0\"            \"0\"       \n      [,49]                                \nPrey  \"UOM (Unidentified Organic Material)\"\nCu1-C \"0\"                                  \nCu2-C \"0\"                                  \nCu3-C \"0\"                                  \nCz1-C \" 0\"                                 \nAr1-C \"0\"                                  \n\n\nEsto logró nuestro objetivo, aunque con un pequeño gran problema: toda la información es texto. ¿Por qué? Resulta que las columnas solo pueden contener datos de un solo tipo, por lo que al tener el texto de las especies presa todas las columnas son transformadas a cadenas de caracter. ¿Qué podemos hacer? Transponer los datos en tres pasos.\n\n\n3.7.2 “Rebanadas” (slices)\nEl primer paso es separar los nombres de las presas de los datos de los depredadores:\n\nprey <- datos3$Prey\nhead(prey)\n\n[1] \"Alpheus_lottini\"   \"Alpheus_spp\"       \"Alpheus_umbo\"     \n[4] \"Amphipods\"         \"Apogon_retrosella\" \"Appendicularians\" \n\ncounts <- datos3[,2:ncol(datos3)]\nhead(counts)\n\n# A tibble: 6 × 255\n  `Cu1-C` `Cu2-C` `Cu3-C` `Cz1-C` `Ar1-C` `Ps1-C` `Cz2-C` `Cz3-C` `Ac1-C`\n    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1       0       0       0       0       0       0       0       0       0\n2       0       4       0       0       0       0       0       0       0\n3       0       0       0       0       0       0       0       0       0\n4       0       0       0       6       0       0       0       0       0\n5       0       0       0       0       0       0       0       0       0\n6       0       0       0       0       0       0       0       0       0\n# … with 246 more variables: `Cu4-C` <dbl>, `Cu5-C` <dbl>, `Lp1-C` <dbl>,\n#   `Gc1-C` <dbl>, `Cz4-C` <dbl>, `Cu6-C` <dbl>, `Cu7-C` <dbl>, `Lp2-C` <dbl>,\n#   `Lp3-C` <dbl>, `Lp4-C` <dbl>, `Lp5-C` <dbl>, `Lp6-C` <dbl>, `Lp7-C` <dbl>,\n#   `Lp8-C` <dbl>, `Lp9-C` <dbl>, `Lp10-C` <dbl>, `Lp11-C` <dbl>,\n#   `Ac2-C` <dbl>, `Pm1-C` <dbl>, `Pm2-C` <dbl>, `Pm3-C` <dbl>, `Gc2-C` <dbl>,\n#   `Cz5-C` <dbl>, `Cz6-C` <dbl>, `Ar2-C` <dbl>, `Ar3-C` <dbl>, `Ar4-C` <dbl>,\n#   `Ar5-C` <dbl>, `Cz7-C` <dbl>, `Pm4-C` <dbl>, `Lp12-C` <dbl>, …\n\n\nTransponer la matriz de conteos:\n\ncountst <- t(counts)\nhead(countst)\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]\nCu1-C    0    0    0    0    0    0    0    0    0     0     0     0     9\nCu2-C    0    4    0    0    0    0    0    0    0     0     0     0     0\nCu3-C    0    0    0    0    0    0    0    0    0     0     0     0     0\nCz1-C    0    0    0    6    0    0    0    0    0     0     0     0     8\nAr1-C    0    0    0    0    0    0    0    0    0     0     0     0     0\nPs1-C    0    0    0    0    0    0    0    0    0     0     0     0     0\n      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25]\nCu1-C     0     0     0     0     0     0     6     0     0     0     0     0\nCu2-C     0     0     0     0     2     0     0     0     0     0     0     0\nCu3-C     0     0     0     0     0     0     0     0     0     0     0     0\nCz1-C     0     0    13     0     0     0     0     0     0     0     0     0\nAr1-C     0     0     0     0     0     0     0     0     0     0     0     0\nPs1-C     0     0     0     0     0     0     0     0     0     0     0     0\n      [,26] [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37]\nCu1-C     0     0     0     0     0     0     0     0     0     0     0     0\nCu2-C     0     0     0     0     0     0     0     0     0     0     0     0\nCu3-C     0     0     0     0     0     0     2     0     0     0     0     0\nCz1-C     0     0     0     0     0     0     0     0     0     0     0     0\nAr1-C     0     0     0     0     0     0     0     0     0     0     0     0\nPs1-C     0     0     0    15     0     0     0     0     0     0     0     0\n      [,38] [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49]\nCu1-C     0     0     0     0     0     0     0     0     0     0     0     0\nCu2-C     0     0     0     0     0     0     0     0     0     0     0     0\nCu3-C     0     0     0     0     0     0     0     0     0     0     0     0\nCz1-C     0     0     0     0     0     0     0     0     0     0     0     0\nAr1-C     0     0     0     2     0     0     0     0     0     0     0     0\nPs1-C     0     0     0     0     0     0     0     0     0     0     0     0\n\n\n\n\n3.7.3 Cambiar nombres de columnas\nPara acceder o asignar los nombres de las columnas o renglones de arreglos bidimensionales podemos utilizar los atributos colnames(data) y rownames(data):\n\ncolnames(countst) <- prey\nhead(countst)\n\n      Alpheus_lottini Alpheus_spp Alpheus_umbo Amphipods Apogon_retrosella\nCu1-C               0           0            0         0                 0\nCu2-C               0           4            0         0                 0\nCu3-C               0           0            0         0                 0\nCz1-C               0           0            0         6                 0\nAr1-C               0           0            0         0                 0\nPs1-C               0           0            0         0                 0\n      Appendicularians Axoclinus_nigricaudis Bittium_cerralvoense Chaetognaths\nCu1-C                0                     0                    0            0\nCu2-C                0                     0                    0            0\nCu3-C                0                     0                    0            0\nCz1-C                0                     0                    0            0\nAr1-C                0                     0                    0            0\nPs1-C                0                     0                    0            0\n      Cirripedia_Chthamalus_anisopoma Cladocerans_Penila_avirostris\nCu1-C                               0                             0\nCu2-C                               0                             0\nCu3-C                               0                             0\nCz1-C                               0                             0\nAr1-C                               0                             0\nPs1-C                               0                             0\n      Cladocerans_Pseudovadne_tergestina Copepods_Acartia_clausi\nCu1-C                                  0                       9\nCu2-C                                  0                       0\nCu3-C                                  0                       0\nCz1-C                                  0                       8\nAr1-C                                  0                       0\nPs1-C                                  0                       0\n      Copepods_Calanus_pacificus Epitonium_canna Fish_eggs foraminifera\nCu1-C                          0               0         0            0\nCu2-C                          0               0         0            0\nCu3-C                          0               0         0            0\nCz1-C                          0               0        13            0\nAr1-C                          0               0         0            0\nPs1-C                          0               0         0            0\n      Gnathophyllum_panamense Hidrozoa Ichtyoplankton\nCu1-C                       0        0              6\nCu2-C                       2        0              0\nCu3-C                       0        0              0\nCz1-C                       0        0              0\nAr1-C                       0        0              0\nPs1-C                       0        0              0\n      Larvae_crustaceans_megalopa larvae_crustaceans_zoea Liomera_cinctimana\nCu1-C                           0                       0                  0\nCu2-C                           0                       0                  0\nCu3-C                           0                       0                  0\nCz1-C                           0                       0                  0\nAr1-C                           0                       0                  0\nPs1-C                           0                       0                  0\n      Litiopa_melanostoma Mysid Mytella_arciformis Mytella_tumbezensis\nCu1-C                   0     0                  0                   0\nCu2-C                   0     0                  0                   0\nCu3-C                   0     0                  0                   0\nCz1-C                   0     0                  0                   0\nAr1-C                   0     0                  0                   0\nPs1-C                   0     0                  0                   0\n      Nanocassiope_polita Nyctiphanes_simplex Ostracods Otoliths\nCu1-C                   0                   0         0        0\nCu2-C                   0                   0         0        0\nCu3-C                   0                   0         0        0\nCz1-C                   0                   0         0        0\nAr1-C                   0                   0         0        0\nPs1-C                   0                  15         0        0\n      Palaemon_ritter Panopeus_purpureus Parviturbo_acuticostatus\nCu1-C               0                  0                        0\nCu2-C               0                  0                        0\nCu3-C               2                  0                        0\nCz1-C               0                  0                        0\nAr1-C               0                  0                        0\nPs1-C               0                  0                        0\n      Parviturbo_erici Parviturbo_spp Pteropods Quadrella_nitida\nCu1-C                0              0         0                0\nCu2-C                0              0         0                0\nCu3-C                0              0         0                0\nCz1-C                0              0         0                0\nAr1-C                0              0         0                0\nPs1-C                0              0         0                0\n      Tagelus_californianus Tegula_globulus Tegula_mariana Tellina_coani\nCu1-C                     0               0              0             0\nCu2-C                     0               0              0             0\nCu3-C                     0               0              0             0\nCz1-C                     0               0              0             0\nAr1-C                     0               0              2             0\nPs1-C                     0               0              0             0\n      Trapezia_bidentata Trapezia_formosa Trapezia_spp Ulva_dactylifera\nCu1-C                  0                0            0                0\nCu2-C                  0                0            0                0\nCu3-C                  0                0            0                0\nCz1-C                  0                0            0                0\nAr1-C                  0                0            0                0\nPs1-C                  0                0            0                0\n      Ulva_lactuca Ulva_spp UOM (Unidentified Organic Material)\nCu1-C            0        0                                   0\nCu2-C            0        0                                   0\nCu3-C            0        0                                   0\nCz1-C            0        0                                   0\nAr1-C            0        0                                   0\nPs1-C            0        0                                   0\n\n\n\n\n3.7.4 Transformaciones\nEl resultado de las operaciones anteriores es una matriz; sin embargo, podemos pasarlo a un data.frame:\n\ncountst <- as.data.frame(countst)\nhead(countst)\n\n      Alpheus_lottini Alpheus_spp Alpheus_umbo Amphipods Apogon_retrosella\nCu1-C               0           0            0         0                 0\nCu2-C               0           4            0         0                 0\nCu3-C               0           0            0         0                 0\nCz1-C               0           0            0         6                 0\nAr1-C               0           0            0         0                 0\nPs1-C               0           0            0         0                 0\n      Appendicularians Axoclinus_nigricaudis Bittium_cerralvoense Chaetognaths\nCu1-C                0                     0                    0            0\nCu2-C                0                     0                    0            0\nCu3-C                0                     0                    0            0\nCz1-C                0                     0                    0            0\nAr1-C                0                     0                    0            0\nPs1-C                0                     0                    0            0\n      Cirripedia_Chthamalus_anisopoma Cladocerans_Penila_avirostris\nCu1-C                               0                             0\nCu2-C                               0                             0\nCu3-C                               0                             0\nCz1-C                               0                             0\nAr1-C                               0                             0\nPs1-C                               0                             0\n      Cladocerans_Pseudovadne_tergestina Copepods_Acartia_clausi\nCu1-C                                  0                       9\nCu2-C                                  0                       0\nCu3-C                                  0                       0\nCz1-C                                  0                       8\nAr1-C                                  0                       0\nPs1-C                                  0                       0\n      Copepods_Calanus_pacificus Epitonium_canna Fish_eggs foraminifera\nCu1-C                          0               0         0            0\nCu2-C                          0               0         0            0\nCu3-C                          0               0         0            0\nCz1-C                          0               0        13            0\nAr1-C                          0               0         0            0\nPs1-C                          0               0         0            0\n      Gnathophyllum_panamense Hidrozoa Ichtyoplankton\nCu1-C                       0        0              6\nCu2-C                       2        0              0\nCu3-C                       0        0              0\nCz1-C                       0        0              0\nAr1-C                       0        0              0\nPs1-C                       0        0              0\n      Larvae_crustaceans_megalopa larvae_crustaceans_zoea Liomera_cinctimana\nCu1-C                           0                       0                  0\nCu2-C                           0                       0                  0\nCu3-C                           0                       0                  0\nCz1-C                           0                       0                  0\nAr1-C                           0                       0                  0\nPs1-C                           0                       0                  0\n      Litiopa_melanostoma Mysid Mytella_arciformis Mytella_tumbezensis\nCu1-C                   0     0                  0                   0\nCu2-C                   0     0                  0                   0\nCu3-C                   0     0                  0                   0\nCz1-C                   0     0                  0                   0\nAr1-C                   0     0                  0                   0\nPs1-C                   0     0                  0                   0\n      Nanocassiope_polita Nyctiphanes_simplex Ostracods Otoliths\nCu1-C                   0                   0         0        0\nCu2-C                   0                   0         0        0\nCu3-C                   0                   0         0        0\nCz1-C                   0                   0         0        0\nAr1-C                   0                   0         0        0\nPs1-C                   0                  15         0        0\n      Palaemon_ritter Panopeus_purpureus Parviturbo_acuticostatus\nCu1-C               0                  0                        0\nCu2-C               0                  0                        0\nCu3-C               2                  0                        0\nCz1-C               0                  0                        0\nAr1-C               0                  0                        0\nPs1-C               0                  0                        0\n      Parviturbo_erici Parviturbo_spp Pteropods Quadrella_nitida\nCu1-C                0              0         0                0\nCu2-C                0              0         0                0\nCu3-C                0              0         0                0\nCz1-C                0              0         0                0\nAr1-C                0              0         0                0\nPs1-C                0              0         0                0\n      Tagelus_californianus Tegula_globulus Tegula_mariana Tellina_coani\nCu1-C                     0               0              0             0\nCu2-C                     0               0              0             0\nCu3-C                     0               0              0             0\nCz1-C                     0               0              0             0\nAr1-C                     0               0              2             0\nPs1-C                     0               0              0             0\n      Trapezia_bidentata Trapezia_formosa Trapezia_spp Ulva_dactylifera\nCu1-C                  0                0            0                0\nCu2-C                  0                0            0                0\nCu3-C                  0                0            0                0\nCz1-C                  0                0            0                0\nAr1-C                  0                0            0                0\nPs1-C                  0                0            0                0\n      Ulva_lactuca Ulva_spp UOM (Unidentified Organic Material)\nCu1-C            0        0                                   0\nCu2-C            0        0                                   0\nCu3-C            0        0                                   0\nCz1-C            0        0                                   0\nAr1-C            0        0                                   0\nPs1-C            0        0                                   0\n\n\n\n\n3.7.5 Añadir vectores como columnas\nAhora tenemos un data.frame; sin embargo, tenemos las claves como nombres de los renglones y, según qué querramos realizar, podemos necesitar que estas formen su propia columna. Una forma de hacerlo es: 1) extraer los nombres de los renglones y 2) añadirlos como una columna adicional:\n\nkeys <- rownames(countst)\ncountst <- cbind(keys, countst)\nhead(countst)\n\n       keys Alpheus_lottini Alpheus_spp Alpheus_umbo Amphipods\nCu1-C Cu1-C               0           0            0         0\nCu2-C Cu2-C               0           4            0         0\nCu3-C Cu3-C               0           0            0         0\nCz1-C Cz1-C               0           0            0         6\nAr1-C Ar1-C               0           0            0         0\nPs1-C Ps1-C               0           0            0         0\n      Apogon_retrosella Appendicularians Axoclinus_nigricaudis\nCu1-C                 0                0                     0\nCu2-C                 0                0                     0\nCu3-C                 0                0                     0\nCz1-C                 0                0                     0\nAr1-C                 0                0                     0\nPs1-C                 0                0                     0\n      Bittium_cerralvoense Chaetognaths Cirripedia_Chthamalus_anisopoma\nCu1-C                    0            0                               0\nCu2-C                    0            0                               0\nCu3-C                    0            0                               0\nCz1-C                    0            0                               0\nAr1-C                    0            0                               0\nPs1-C                    0            0                               0\n      Cladocerans_Penila_avirostris Cladocerans_Pseudovadne_tergestina\nCu1-C                             0                                  0\nCu2-C                             0                                  0\nCu3-C                             0                                  0\nCz1-C                             0                                  0\nAr1-C                             0                                  0\nPs1-C                             0                                  0\n      Copepods_Acartia_clausi Copepods_Calanus_pacificus Epitonium_canna\nCu1-C                       9                          0               0\nCu2-C                       0                          0               0\nCu3-C                       0                          0               0\nCz1-C                       8                          0               0\nAr1-C                       0                          0               0\nPs1-C                       0                          0               0\n      Fish_eggs foraminifera Gnathophyllum_panamense Hidrozoa Ichtyoplankton\nCu1-C         0            0                       0        0              6\nCu2-C         0            0                       2        0              0\nCu3-C         0            0                       0        0              0\nCz1-C        13            0                       0        0              0\nAr1-C         0            0                       0        0              0\nPs1-C         0            0                       0        0              0\n      Larvae_crustaceans_megalopa larvae_crustaceans_zoea Liomera_cinctimana\nCu1-C                           0                       0                  0\nCu2-C                           0                       0                  0\nCu3-C                           0                       0                  0\nCz1-C                           0                       0                  0\nAr1-C                           0                       0                  0\nPs1-C                           0                       0                  0\n      Litiopa_melanostoma Mysid Mytella_arciformis Mytella_tumbezensis\nCu1-C                   0     0                  0                   0\nCu2-C                   0     0                  0                   0\nCu3-C                   0     0                  0                   0\nCz1-C                   0     0                  0                   0\nAr1-C                   0     0                  0                   0\nPs1-C                   0     0                  0                   0\n      Nanocassiope_polita Nyctiphanes_simplex Ostracods Otoliths\nCu1-C                   0                   0         0        0\nCu2-C                   0                   0         0        0\nCu3-C                   0                   0         0        0\nCz1-C                   0                   0         0        0\nAr1-C                   0                   0         0        0\nPs1-C                   0                  15         0        0\n      Palaemon_ritter Panopeus_purpureus Parviturbo_acuticostatus\nCu1-C               0                  0                        0\nCu2-C               0                  0                        0\nCu3-C               2                  0                        0\nCz1-C               0                  0                        0\nAr1-C               0                  0                        0\nPs1-C               0                  0                        0\n      Parviturbo_erici Parviturbo_spp Pteropods Quadrella_nitida\nCu1-C                0              0         0                0\nCu2-C                0              0         0                0\nCu3-C                0              0         0                0\nCz1-C                0              0         0                0\nAr1-C                0              0         0                0\nPs1-C                0              0         0                0\n      Tagelus_californianus Tegula_globulus Tegula_mariana Tellina_coani\nCu1-C                     0               0              0             0\nCu2-C                     0               0              0             0\nCu3-C                     0               0              0             0\nCz1-C                     0               0              0             0\nAr1-C                     0               0              2             0\nPs1-C                     0               0              0             0\n      Trapezia_bidentata Trapezia_formosa Trapezia_spp Ulva_dactylifera\nCu1-C                  0                0            0                0\nCu2-C                  0                0            0                0\nCu3-C                  0                0            0                0\nCz1-C                  0                0            0                0\nAr1-C                  0                0            0                0\nPs1-C                  0                0            0                0\n      Ulva_lactuca Ulva_spp UOM (Unidentified Organic Material)\nCu1-C            0        0                                   0\nCu2-C            0        0                                   0\nCu3-C            0        0                                   0\nCz1-C            0        0                                   0\nAr1-C            0        0                                   0\nPs1-C            0        0                                   0"
  },
  {
    "objectID": "c03_bases_r.html#operadores-lógicos",
    "href": "c03_bases_r.html#operadores-lógicos",
    "title": "3  Bases de R",
    "section": "3.8 Operadores lógicos",
    "text": "3.8 Operadores lógicos\nLos operadores lógicos nos sirven para hacer comparaciones y obtener un resultado booleano (T o F). Los más comunes son: 1. cond1|cond2: Condicional “O”. T si se cumple alguna de las dos condiciones\n\nc <- 5L\nis.integer(c)|is.double(c)\n\n[1] TRUE\n\n\n\ncond1&cond2: Condicional “Y”. T si se cumplen ambas condiciones\n\n\nis.integer(c)&(c>3)\n\n[1] TRUE\n\n\n\n<, >: Comparaciones, menor qué o mayor qué\n\n\nprint(c<10)\n\n[1] TRUE\n\nprint(c>5)\n\n[1] FALSE\n\n\n\n<=, >=: Comparaciones, menor o igual qué; mayor o igual qué.\na!=b: Desigualdad, T si a es diferente de b\n\n\nc!=5\n\n[1] FALSE"
  },
  {
    "objectID": "c03_bases_r.html#automatización",
    "href": "c03_bases_r.html#automatización",
    "title": "3  Bases de R",
    "section": "3.9 Automatización",
    "text": "3.9 Automatización\nEl primer paso de la automatización es generar funciones que te permitan realizar la misma acción múltiples veces y no cometer algún error en dichas repeticiones. Esta práctica se deriva de una de las máximas más importantes en programación: “Don’t repeat yourself” (DRY, no te repitas a ti mismo); es decir, dejar que la computadora haga las repeticiones por sí mismas. En la práctica, esto implica no estar copiando y pegando el mismo bloque de código una y otra vez y luego modificarlo manualmente, sino que escribirlo solo una vez y luego decirle a la computadora que repita esa acción n veces, modificando algún(os) argumento(s), o que cambie el comportamiento en función de si se cumple o no una condición en nuestros datos. En ese caso, las estructuras de control son nuestras mejores aliadas.\n\n3.9.1 Ciclos for\nHay distintas formas de realizar la repetición de acciones, pero hoy introduciremos únicamente los ciclos for por ser los más probables a ser requeridos. Un ciclo for consta de cuatro elementos:\nfor (variable in vector) {action}\n\nLa estructura de control for, evidentemente\nUna variable que hace las veces de un marcador de posición; es decir, la utilizaremos para indicar en dónde se van a sustituir los valores que queremos ciclar\nLos valores que ciclaremos, contenidos en un vector\nLa acción a realizar\n\nComo muchas otras cosas, es más fácil entenderlo utilizando algunos ejemplos. El primero de ellos es simplemente imprimir la secuencia de números del 1 al 10. Aunque podemos escribir 10 veces la función print e ir cambiando el número, es mucho más sencillo:\n\nfor (i in 1:10) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n\n\n¿Qué fue lo que hizo la computadora? Utilizó la función print() para mostrarnos el contenido de i, el cuál es el iésimo elemento de la secuencia 1:10. En otras palabras, si es la segunda vuelta que da, imprimirá el número 2, si es la séptima imprimirá 7, y así hasta que termine con todos los elementos en la secuencia. Ahora, sumemos 2 a cada número de la secuencia:\n\nfor (i in 1:10) {\n  print(i+2)\n}\n\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n[1] 10\n[1] 11\n[1] 12\n\n\nAl igual que en el caso anterior, tomó uno por uno los valores (de forma secuencial), le añadió 2 y luego mostró el resultado en pantalla. Este tipo de estructuras son sumamente útiles, pues no solo nos ahorran errores, sino también tiempo de ejecución. Sobra decir que no es la única manera de hacer este tipo de ciclos, ni tampoco es la más rápida. Tenemos algo que se conocen como funciones vectorizadas.\n\n\n3.9.2 Familia de funciones apply()\nPodemos entender la vectorización como la aplicación de una función a cada elemento de un vector (igual que el ciclo for), aunque procesando todo el vector “al mismo tiempo”. Esta última parte no es estrictamente verdad, aunque lo cierto es que son más rápidas que los ciclos for tradicionales. En R tenemos toda una gama de funciones que hacen justo eso, la familia apply y sus relacionadas, compuesta por las funciones:\n\napply\nlapply\nsapply\ntapply\nmapply\nby\naggregate\n\nTodas estas funciones manipulan porciones de datos como matrices, arreglos, listas o data frames de forma repetitiva. Básicamente nos permiten evitar el uso explícito de un ciclo for. Toman como argumento una lista, matriz o data frame y le aplican una función con uno o más argumentos adicionales. Esta función puede ser:\n\nUna función de agregación, por ejemplo la media o la suma\nFunciones de transformaciones o para extraer sub-conjuntos\nOtras funciones vectorizadas, que dan como resultado estructuras más complejas como listas, vectores, matrices o arreglos. Pero basta de cháchara, ¿cómo y cuándo debemos de utilizarlas? La respuesta depende totalmente de la estructura de los datos y el formato de salida que se necesite. Veamos algunos casos de uso:\n\n\n3.9.2.1 apply()\nEsta es la función “madre” de las demás, la cual opera sobre arreglos. Para simplicidad, vamos a limitarnos a arreglos bi-dimensionales como las matrices o data.frames. La sintaxis para su uso es apply(X, MARGIN, FUN, ...), donde X es el arreglo, MARGIN es el márgen sobre el cuál va a actuar la función; es decir, si queremos que la aplique a cada renglón (MARGIN = 1) o a cada columna (MARGIN = 2), y FUN es el nombre de la función a aplicar (puede ser cualquiera, incluso una función definida por nosotros).\nPodemos pensar en obtener la suma o el promedio de cada columna de nuestro data.frame con las presas utilizando un ciclo, o podemos utilizar apply, tal que:\n\nsums <- apply(datos2[,2:ncol(datos2)], 2, sum)\nsums\n\n                    Alpheus_lottini                         Alpheus_spp \n                                  4                                  12 \n                       Alpheus_umbo                           Amphipods \n                                  9                                  44 \n                  Apogon_retrosella                    Appendicularians \n                                  5                                   5 \n              Axoclinus_nigricaudis                Bittium_cerralvoense \n                                  2                                  35 \n                       Chaetognaths     Cirripedia_Chthamalus_anisopoma \n                                 50                                   5 \n      Cladocerans_Penila_avirostris  Cladocerans_Pseudovadne_tergestina \n                                 34                                 171 \n            Copepods_Acartia_clausi          Copepods_Calanus_pacificus \n                                390                                  50 \n                    Epitonium_canna                           Fish_eggs \n                                  3                                  96 \n                       foraminifera             Gnathophyllum_panamense \n                                205                                  11 \n                           Hidrozoa                      Ichtyoplankton \n                                  1                                 153 \n        Larvae_crustaceans_megalopa             larvae_crustaceans_zoea \n                                 22                                  17 \n                 Liomera_cinctimana                 Litiopa_melanostoma \n                                 13                                  13 \n                              Mysid                  Mytella_arciformis \n                                  5                                   2 \n                Mytella_tumbezensis                 Nanocassiope_polita \n                                  1                                   2 \n                Nyctiphanes_simplex                           Ostracods \n                                549                                  76 \n                           Otoliths                     Palaemon_ritter \n                                  2                                   2 \n                 Panopeus_purpureus            Parviturbo_acuticostatus \n                                  4                                   1 \n                   Parviturbo_erici                      Parviturbo_spp \n                                  3                                   2 \n                          Pteropods                    Quadrella_nitida \n                                  8                                   1 \n              Tagelus_californianus                     Tegula_globulus \n                                  2                                  22 \n                     Tegula_mariana                       Tellina_coani \n                                 20                                   3 \n                 Trapezia_bidentata                    Trapezia_formosa \n                                  2                                   6 \n                       Trapezia_spp                    Ulva_dactylifera \n                                  4                                  35 \n                       Ulva_lactuca                            Ulva_spp \n                                158                                  78 \nUOM (Unidentified Organic Material) \n                                 20 \n\n\n\n\n3.9.2.2 aggregate()\nOtra función extremadamente útil es la función aggregate(). Esta función nos permite aplicar una función a distintos grupos. Un escenario clásico es obtener el promedio de una variable para cada grupo, por ejemplo el promedio de conteos de quetognatos. La forma “tradicional” es: aggregate(x, by, FUN), donde x es el objeto R a agrupar, by es una lista con los grupos y FUN es la función a aplicar; sin embargo, podemos utilizar una notación más compacta utilizando una formula: aggregate(forumla, data, FUN). Las fórmulas en R son objetos sumamente útiles y que se utilizan para una gran diversidad de cosas. Su estructura es: Y ~ X, y se lee “Y con respecto a X”. En nuestro caso particular:\n\naggregate(Chaetognaths~sp, data = datos1, FUN = mean)\n\n   sp Chaetognaths\n1  Ac    0.0000000\n2  Ar    0.0000000\n3  Cu    0.0000000\n4  Cz    0.5500000\n5  Er    0.1785714\n6  Gc    0.0000000\n7  Lp    0.0000000\n8  Pm    0.2500000\n9  Ps    1.1250000\n10 Tp    1.1538462\n\n\n\n\n\n3.9.3 Condicionales\nOk, ahora conocemos una manera de aplicar una función a una serie de elementos, pero que pasa si queremos aplicarla de manera condicionada; es decir, si queremos solo imprimir los números mayores a 5, por ejemplo. Eso es justo de lo que se tratan los condicionales, particularmente if, else, e ifelse. La lógica detrás de ellos es sumanmente simple: si se cumple una condición, realiza una acción, si no se cumple, realiza otra (o no realices nada). Comencemos con if. Su estructura es: if(condition){action T}, que notarás es básicamente la descripción que dimos, solo que sin una acción en caso de que no se cumpla la condición. Un ejemplo sería proporcionar un número y que nos diga si es mayor a 5:\n\nx <- 6\nif (x>5) {print(\"x es mayor a 5\")}\n\n[1] \"x es mayor a 5\"\n\n\n¿Y si no se cumple la condición? Veamos qué pasa:\n\nx <- 1\nif (x>5) {print(\"x es mayor a 5\")}\n\nR no nos da ninguna salida, pues no sabe qué hacer. Una forma de decirle es utilizando el complemento de if, else, que nos permite establecer una acción secundaria:\n\nif (x>5) {print(\"x es mayor a 5\")\n  }else{print(\"x no es mayor a 5\")}\n\n[1] \"x no es mayor a 5\"\n\n\nUna notación mucho más compacta para este tipo de casos es utilizar la función ifelse(condition, action T, action F):\n\nx <- 4\nifelse(x > 5,\n       \"x es mayor a 5\",\n       \"x no es mayor a 5\")\n\n[1] \"x no es mayor a 5\"\n\n\nEl resultado fue el mismo que el anterior, pero qué pasa si tenemos más de dos escenarios, que, por ejemplo, nos interesara decir si el número es mayor, menor o igual a 5. Veamos primero lo que sucede si establecemos que x sea 5:\n\nx <- 5\nifelse(x > 5,\n       \"x es mayor a 5\",\n       \"x no es mayor a 5\")\n\n[1] \"x no es mayor a 5\"\n\n\nLa computadora no hizo nada mal, 5 no es mayor a 5. En otros lenguajes de programación añadiríamos una estructura llamada elif, pero en R solo hay que añadir otro(s) if. Mientras que else aplica para todos los casos donde la condición no se cumpla, estos if secundarios nos permiten establecer condiciones adicionales para cuando la condición principal no se cumpla. Volviendo a nuestro problema con x = 5:\n\nx <- 4\nif (x > 5) {\n  print(\"x es mayor a 5\")\n}\n\nif (x == 5) {\n  print(\"x es 5\")\n}else{print(\"x es menor a 5\")}\n\n[1] \"x es menor a 5\"\n\n\nAhora sí cubrimos todas nuestras bases para este problema de comparación. Como te imaginarás, el siguiente paso lógico es mezclar for e if o, mejor dicho, anidarlos:\n\nx <- 1:10\n\nfor (i in x) {\n  if (i > 5) {\n    print(\"x es mayor a 5\")\n  }\n  if (i == 5) {\n    print(\"x es 5\")\n  }else{print(\"x es menor a 5\")}\n}\n\n[1] \"x es menor a 5\"\n[1] \"x es menor a 5\"\n[1] \"x es menor a 5\"\n[1] \"x es menor a 5\"\n[1] \"x es 5\"\n[1] \"x es mayor a 5\"\n[1] \"x es menor a 5\"\n[1] \"x es mayor a 5\"\n[1] \"x es menor a 5\"\n[1] \"x es mayor a 5\"\n[1] \"x es menor a 5\"\n[1] \"x es mayor a 5\"\n[1] \"x es menor a 5\"\n[1] \"x es mayor a 5\"\n[1] \"x es menor a 5\"\n\n\nCon esto también quiero decir que podemos anidar ciclos for, tal que:\n\nx <- 1:5\ny <- 100:105\n\nfor (i in x) {\n  for (j in y) {\n    print(c(i,j))\n  }\n}\n\n[1]   1 100\n[1]   1 101\n[1]   1 102\n[1]   1 103\n[1]   1 104\n[1]   1 105\n[1]   2 100\n[1]   2 101\n[1]   2 102\n[1]   2 103\n[1]   2 104\n[1]   2 105\n[1]   3 100\n[1]   3 101\n[1]   3 102\n[1]   3 103\n[1]   3 104\n[1]   3 105\n[1]   4 100\n[1]   4 101\n[1]   4 102\n[1]   4 103\n[1]   4 104\n[1]   4 105\n[1]   5 100\n[1]   5 101\n[1]   5 102\n[1]   5 103\n[1]   5 104\n[1]   5 105"
  },
  {
    "objectID": "c03_bases_r.html#ejercicios",
    "href": "c03_bases_r.html#ejercicios",
    "title": "3  Bases de R",
    "section": "3.10 Ejercicios",
    "text": "3.10 Ejercicios\n\n¿Qué es un objeto?\n¿Cuál es la diferencia entre una variable y una función?\n¿Qué es una librería? ¿Qué pasa si utilizas la función ggplot() sin haber cargado la librería ggplot2?\n¿Cuál es la diferencia entre un dato y una estructura?\nCarga los datos1.csv y añade un renglón adicional con los totales para cada columna.\nCarga los datos1.csv y obten una tabla con los conteos promedio de cada presa para cada especie (aggregate/apply o ciclos).\nCombina el ciclo for anidado del último ejemplo con un condicional, en el cuál se imprima si la suma de ambos números (i, j) es mayor, menor o igual a 105."
  },
  {
    "objectID": "c04_ggplot2.html",
    "href": "c04_ggplot2.html",
    "title": "4  Principios de visualización de datos y ggplot2",
    "section": "",
    "text": "Antes de comenzar una visualización es necesario saber qué queremos responder con ella. En este caso, utilizaremos la base de datos mpg incluída en ggplot2. El primer paso es, entonces, conocer la información que contiene. Para ello guardaremos la base en una variable que llamaremos df1:\n\nlibrary(ggplot2)\n\ndf1 <- ggplot2::mpg\ndf1\n\n\n\n  \n\n\n\nUna manera rápida de tener una idea de cómo está dispuesta una base de datos es utilizando la función head(var). Esta nos mostrará solo las primeras instancias (renglones) del data.frame que estemos analizando. En la tabla inferior podemos ver que se trata de una base de datos sobre automóviles y que las columnas representan: el fabricante, el modelo, el desplazamiento de combustible (litros), el año del modelo, el número de cilindros, el tipo de transmisión, el tipo de tracción, los consumos en ciudad y autopista (en millas por galón, mpg), el tipo de combustible que utilizan y la clase a la que pertenencen. También nos plantearemos el objetivo de eliminar la mayor cantidad de elementos posibles hasta solo tener el esqueleto y de ahí agregar algunos elementos que favorezcan la interpretación.\n\nhead(df1)\n\n\n\n  \n\n\n\n\n\nA partir de esta información podemos tratar de responder si existe una relación apreciable entre el consumo de combustible (por ejemplo en autopista) y el desplazamiento del motor, considerando la clase del vehículo. Para atender a esta pregunta utilizaremos un gráfico de dispersión, con el desplazamiento en el eje x, el consumo en el eje y y la clase indicada por los colores de los puntos. Ahora que tenemos claro qué queremos visualizar y cómo lo vamos a visualizar podemos empezar a graficar. El primer paso es inicializar el espacio de graficado con la función ggplot() y pasarle los parámetros estéticos utilizando la función aes(x, y, colour). Es importante mencionar que en este momento aparecerá únicamente el espacio de graficado en blanco. Esto es normal, ya que únicamente definimos el “qué”, pero no el “cómo”.\n\nggplot(data = df1, aes(x = displ, y = cty, colour = class))\n\n\n\n\nYa que inicializamos el espacio gráfico podemos agregar la información que nos interesa. Para facilitar la construcción paso a paso y evitar el repetir código innecesariamente podemos almacenar la gráfica completa en una variable (por ejemplo plot2) e ir añadiendo capas (operador +) posteriormente. Para ver un gráfico guardado en una variable simplemente hay que llamar a esa variable. La primera capa que agregaremos será la que indicará el tipo de gráfico que deseamos (nombrados como geom_*), en este caso un gráfico de dispersión:\n\nplot1 <- ggplot(data = df1, aes(x = displ, y = hwy, colour = class)) +\n         geom_point()\nplot1 # Imprime el gráfico\n\n\n\n\nAhora sí tenemos la información que necesitamos y podríamos comenzar a describir el gráfico, pero en realidad hay demasiados elementos que son innecesarios y otros que son poco informativos en su estado actual (etiquetas de ejes), entonces trabajemos uno por uno. Para modificar las etiquetas de los ejes podemos utilizar las funciones xlab() y ylab() como capas separadas; sin embargo, podemos modificar todas las etiquetas y títulos en un mismo paso utilizando la función labs(title, x, y, caption, colour, ...).\n\nplot2 <- plot1 + labs(x = \"Desplazamiento (l)\",\n                      y = 'Consumo (mpg)',\n                      colour = 'Clase',\n                      title = \n                        'Tamaño del motor y Rendimiento de combustible',\n                      subtitle = 'Consumo en carretera',\n                      caption = 'Datos: ggplot2::mpg')\nplot2\n\n\n\n\n\n\n\nAhora que está claro cuáles son las variables que estamos mostrando podemos empezar a modificar la estética. Recordemos que debemos mantener la relación datos/tinta lo más alta posible, y uno de los elementos más prevalentes del gráfico es el fondo gris con todo y cuadrículas. Para modificar esos elementos tenemos que modificar el “tema” de la gráfica, que no es otra cosa mas que utilizar una función que nos permita modificar en una sola línea la estética general del gráfico. Los temas se encuentran señalados con el nombre theme_*. Probemos con theme_minimal():\n\nplot2 + theme_minimal()\n\n\n\n\nLogramos eliminar el fondo gris y de paso las “espinas” (líneas de los ejes) y ahora el gráfico está en mucho mejor condición para ser presentado; sin embargo aún podemos ir más lejos. El objetivo de esta gráfica no es ver los detalles precisos de la información, si no extraer la información más relevante, por lo que la cuadrícula es un elemento que no aporta nada a la visualización. Para retirarla utilizaremos la función theme(), la cual permite modificar el aspecto de todos los elementos del gráfico. En realidad, las funciones theme_*() son aplicaciones de theme() con diferentes valores por defecto, por lo que podemos replicar el efecto de theme_minimal() e incluir otras modificaciones. Otra función muy útil para este procedimiento es la función element_blank(), la cual le indica a ggplot2 que no debe mostrar ese elemento. Otra cuestión importante que debemos de considerar es la relación de aspecto. Debido a que esta puede modificar enormemente la percepción de los datos, su selección no es algo trivial. En general, la proporción áurea (1:1.61) es un buen punto de partida y en series de tiempo es la proporción que menos deforma los datos. Una proporción cuadrada tiene sentido únicamente en aquellos casos en los que ambos ejes tengan la misma magnitud de variación y procuraremos que el eje más largo sea aquel con la variación más pequeña. En este caso, la variación del eje y (5 a 45) es mucho mayor que la del eje x (1.5 a 7), por lo cual una proporción cuadrada no sería una buena alternativa. En su lugar, utilicemos la proporción áurea. El último elemento que eliminaremos aquí son las marcas de los ejes, ya que realmente no aportan demasiada información.\n\nplot2 <- plot2 + \n         # Eliminamos la cuadrícula menor\n         theme(panel.grid.minor = element_blank(),\n               # Eliminamos la cuadrícula mayor\n               panel.grid.major = element_blank(),\n               # Eliminamos el color de fondo\n               panel.background = element_blank(),\n               # Eliminamos las líneas de los ejes\n               axis.line = element_blank(),\n               # Eliminamos la leyenda\n               legend.key = element_blank(),\n               # Cambiamos la relación de aspecto\n               aspect.ratio = 1/1.61,\n               # Eliminamos las marcas de los ejes\n               axis.ticks = element_blank()\n                       )\nplot2\n\n\n\n\n\n\n\nAhora que nos deshicimos del fondo, la cuadrícula y las líneas y marcas de los ejes podemos trabajar en los valores de los ejes. Una de las mejores maneras de hacerlo es utilizando las funciones scale_x_*() o scale_y_*(), sustituyendo el * por continuous o discrete dependiendo del tipo de variable con el que estemos trabajando. En este caso, eliminaremos por completo las marcas del eje y y dejaremos únicamente los desplazamientos más comunes en el eje x.\n\nplot2 <- plot2 + scale_x_continuous(breaks = c(1.8, 2.5, 5, 7)) +\n                 scale_y_continuous(breaks = NULL)\nplot2\n\n\n\n\n\n\n\nAhora que nos deshicimos de los valores del eje la gráfica ya no es entendible debido a que no sabemos cuál es la orientación o la escala de los datos. Una alternativa es añadir un par de líneas de referencia. Esto lo haremos con la función geom_hline(), la cual nos permite añadir líneas horizontales a través de todo el gráfico que cruzan al eje y en una posición que nosotros determinamos:\n\n# Valores de referencia como el mínimo, la media y\n# el máximo de los consumos\n\nrefs <- c(round(min(df1$hwy),0),\n          round(mean(df1$hwy),0),\n          round(max(df1$hwy),0))\n\n# Líneas de referencia, una verde para el mejor consumo,\n# una gris para el consumo promedio y una roja para el peor consumo\nplot2 <- plot2 + geom_hline(yintercept = refs[1],\n                            colour = 'firebrick', alpha = 0.5,\n                            linetype = 'dashed') +\n                 geom_hline(yintercept = refs[2],\n                            colour = 'lightslategrey', alpha = 0.5,\n                            linetype = 'dashed') +\n                 geom_hline(yintercept = refs[3],\n                            colour = 'forestgreen', alpha = 0.5,\n                            linetype = 'dashed')\nplot2\n\n\n\n\nAhora el gráifico ya cuenta nuevamente con un sentido de dimensión, pero no tenemos los valores de referencia, entonces habrá que poner esas anotaciones con la función geom_text(), utilizando como valores de posición en y los mismos que las líneas de referencia + un pequeño valor:\n\n# Líneas de referencia con los mismos colores\nplot2 <- plot2 + annotate('text', x = 1.3, y = refs[1]+1, \n                          label = as.character(refs[1]),\n                          colour = 'firebrick') +\n                 annotate('text', x = 1.3, y = refs[2]+1,\n                          label = as.character(refs[2]),\n                          colour = 'lightslategrey') +\n                 annotate('text', x = 1.3, y = refs[3]+1,\n                          label = as.character(refs[3]),\n                          colour = 'forestgreen')\nplot2\n\n\n\n\nCon esta última modificación terminamos de explorar algunas de las funciones más básicas e importantes para personalizar los elementos que más impactan en una visualización, pero antes de terminar de discutir este punto me gustaría terminar el objetivo que nos propusimos al inicio de sacar información de la gráfica. En general, existe una tendencia a que el consumo de combustible incremente conforme incrementa el desplazamiento, lo cual es de esperarse, ya que el desplazamiento es una medida de el volumen máximo de combustible que puede entrar al motor en un momento dado; sin embargo, podemos también observar que, independientemente del desplazamiento, las SUVs y pickups tienden a tener los peores rendimientos de combustible, mientras que los subcompactos tienden al otro extremo. Podemos también analizar a los vehículos de dos plazas y ver que aún cuando tienen desplazamientos altos, sus rendimientos son mejores que los de las SUVs.\n\n\n\nEn cuanto a la parte visual, se podría argumentar que esta visualización final no es tan precisa como la primera, que algún elemento podría embellecerse, o que podriamos eliminar la leyenda y poner etiquetas de texto en algunos puntos para indicar las clases. Todos estos argumentos y muchos otros serían válidos ya que la estética es algo subjetivo; sin embargo, las decisiones que tomemos deberán estar en función del medio de distribución de la visualización (no es lo mismo una página web que en un medio impreso, por ejemplo) y sobre todo del público objetivo. Esta visualización en particular funciona para los fines didácticos que tenía en mente, es adecuada para una presentación de resultados de manera electrónica como este video, pero no es una visualización adecuada para una publicación científica. Tomando eso en cuenta, te sugiero hacer el ejercicio de transformarla para cumplir con ese objetivo, ¿qué elementos quitarías? ¿qué elementos cambiarías? ¿qué elementos agregarías? ¿crees que en su estado actual cumple con los criterios de Tufte y Cairo que revisamos la clase anterior?\nPara finalizar la clase te presento la visualización inicial y la final, una junto a la otra, para ver en dónde comenzamos, dónde terminamos y cómo llegamos hasta aquí. También te sugiero revises y descargues el PDF de esta página, que es un acordeón donde se encuentran los gráficos y funciones más comunes. Más adelante revisaremos algunos de ellos pero es un recurso que vale la pena tener a la mano.\nEsto es todo para esta clase. ¡Nos vemos en la siguiente!\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Valores de referencia para utilizar en la gráfica\nrefs <- c(round(min(df1$hwy),0),  # Valor mínimo = peor consumo\n          round(mean(df1$hwy),0), # Valor promedio\n          round(max(df1$hwy),0))  # Valor máximo = mejor consumo\n\n# Objeto con todos los pasos para llegar a la gráfica final\n# Inicializamos el espacio gráfico\nfinal.plot <- ggplot(data = df1, aes(x = displ, y = hwy,\n                                     colour = class)) +\n              # Gráfico de dispersión\n              geom_point() +\n              # Establecemos los títulos, subtítulos y un pie de foto\n              labs(x = 'Desplazamiento (l)',\n                   y = 'Consumo (mpg)',\n                   colour = 'Clase',\n                   title = 'Tamaño del motor y Rendimiento de combustible',\n                   subtitle = 'Consumo en carretera',\n                   caption = 'Datos: ggplot2::mpg'\n                   ) +\n              #Eliminamos la cuadrícula menor\n              theme(panel.grid.minor = element_blank(),\n                    #Eliminamos la cuadrícula mayor\n                    panel.grid.major = element_blank(),\n                    #Eliminamos el color de fondo\n                    panel.background = element_blank(),\n                    #Eliminamos las líneas de ejes\n                    axis.line = element_blank(),\n                    #Eliminamos el fondo de la leyenda\n                    legend.key = element_blank(),\n                    #Establecemos la rel. de aspecto\n                    aspect.ratio = 1/1.61,\n                    #Eliminamos las marcas de los ejes\n                    axis.ticks = element_blank(),\n                    #Cambiamos el tipo de letra\n                    text = element_text(family = 'Times',\n                                        colour = 'gray50')\n                    ) + \n              # Reducimos las divisiones del eje ex a 4 valores\n              scale_x_continuous(breaks = c(1.8, 2.5, 5, 7)) +\n              # Eliminamos las divisiones del eje y\n              scale_y_continuous(breaks = NULL) +\n              # Añadimos una línea roja en el peor consumo\n              geom_hline(yintercept = refs[1],\n                         colour = 'firebrick', alpha = 0.5, \n                         linetype = 'dashed') +\n              # Añadimos una línea gris en el consumo promedio\n              geom_hline(yintercept = refs[2],\n                         colour = 'lightslategrey', alpha = 0.5, \n                         linetype = 'dashed') +\n              # Añadimos una línea verde en el mejor consumo\n              geom_hline(yintercept = refs[3],\n                         colour = 'forestgreen', alpha = 0.5,\n                         linetype = 'dashed') +\n              # Etiqueta del peor consumo\n              annotate('text', x = 1.3, y = refs[1]+1,\n                       label = as.character(refs[1]),\n                       colour = 'firebrick') +\n              #Etiqueta del consumo promedio\n              annotate('text', x = 1.3, y = refs[2]+1,\n                       label = as.character(refs[2]),\n                       colour = 'lightslategrey') +\n              # Etiqueta del mejor consumo\n              annotate('text', x = 1.3, y = refs[3]+1,\n                       label = as.character(refs[3]),\n                       colour = 'forestgreen') \n              \nfinal.plot\n\n\n\n\n\n\n\n\nAunque estas modificaciones no necesariamente forman parte del proceso necesario para la visualización que era de nuestro interés, sí que son rutinarias, por lo que vale la pena echarles un ojo.\n\n\nModificar los colores de los puntos. Podemos utilizar la función randomColor(n) de la librería con el mismo nombre. Esta función solamente recibe el número de colores que queremos y los generará de manera aleatoria:\n\naleat <- randomcoloR::randomColor(7)\nfinal.plot + scale_color_manual(name = \"Clase\", values = aleat)\n\n\n\n\nPodemos también especificar una paleta predefinida, utilizando la capa scale_color_brewer():\n\nfinal.plot + scale_color_brewer(type = \"seq\", palette = \"Paired\")\n\n\n\n\nOtra opción es directamente pasar un vector con los nombres de los colores que sean de nuestro interés:\n\ncolor_names <- c(\"red\", \"blue\", \"yellow\", \"black\",\n                 \"dodgerblue\", \"pink\", \"gray\")\nfinal.plot + scale_color_manual(name = \"Clase\", values = color_names)\n\n\n\n\n\n\n\nPara modificar el tamaño de los puntos solamente hay que agregar el argumento size a la capa geom_point, en el cuál indicaremos qué tamaños tomarán los puntos. Puede ser un solo valor:\n\nfinal.plot + geom_point(size = 0.1)\n\n\n\n\nO también a partir de una columna de la base de datos (dividida entre 5 para no obtener únicamente “manchas”):\n\nfinal.plot + geom_point(size = df1$hwy/5)\n\n\n\n\n\n\n\nEl manejo de las tipografías en R es un poco especial, por ello usualmente recomiendo generar el gráfico en R, exportarlo como PDF (cairo_pdf(\"filename.pdf\", width, height, family)) y agregar las cursivas donde sea necesario; sin embargo, un paquete que puede resultar especialmente útil es ggtext. Este añade un nuevo “elemento” de texto que recibe formato Markdown (element_markdown()); es decir, podemos agregar itálicas o negritas. Para poder utilizarlo, sin embargo, es necesario modificar ligeramente nuestros datos de antemano. Para facilitarnos las cosas agregaremos una nueva columna a df1 que contenga las clases en itálicas y extraeremos los valores únicos (algo más eficiente sería hacerlo al revés, pero es más lógico de esta manera):\n\ndf1$clase <- paste0(\"*\",df1$class,\"*\")\nclases <- unique(df1$clase)\n\nFinalmente lo agregaremos a la gráfica. ¡OJO! Es necesario modificar el tema para que entienda el formato markdown:\n\nif(!require(ggtext)) {install.packages(\"ggtext\", dependencies = T)}\n\nLoading required package: ggtext\n\nfinal.plot + scale_color_discrete(name = \"Clase\",labels = clases) +\n             theme(legend.text = ggtext::element_markdown())\n\n\n\n\nCon este elemento podemos modificar también fracciones de cualquier texto de nuestra gráfica, por ejemplo carretera en negritas:\n\nfinal.plot + labs(subtitle = \"Consumo en **carretera**\") +\n             theme(plot.subtitle = ggtext::element_markdown())\n\n\n\n\nMezclando ambas modificaciones:\n\nfinal.plot + scale_color_discrete(name = \"Clase\",labels = clases) +\n             labs(subtitle = \"Consumo en **carretera**\") +\n             theme(plot.subtitle = ggtext::element_markdown(),\n                   legend.text = ggtext::element_markdown())"
  },
  {
    "objectID": "c04_ggplot2.html#conclusión-y-ejercicio",
    "href": "c04_ggplot2.html#conclusión-y-ejercicio",
    "title": "4  Principios de visualización de datos y ggplot2",
    "section": "4.2 Conclusión y ejercicio",
    "text": "4.2 Conclusión y ejercicio\nEn cuanto a la parte visual, se podría argumentar que esta visualización final no es tan precisa como la primera, que algún elemento podría embellecerse, o que podriamos eliminar la leyenda y poner etiquetas de texto en algunos puntos para indicar las clases. Todos estos argumentos y muchos otros serían válidos ya que la estética es algo subjetivo; sin embargo, las decisiones que tomemos deberán estar en función del medio de distribución de la visualización (no es lo mismo una página web que en un medio impreso, por ejemplo) y sobre todo del público objetivo. Esta visualización en particular funciona para los fines didácticos que tenía en mente, es adecuada para una presentación de resultados de manera electrónica como este video, pero no es una visualización adecuada para una publicación científica. Tomando eso en cuenta, te sugiero hacer el ejercicio de transformarla para cumplir con ese objetivo, ¿qué elementos quitarías? ¿qué elementos cambiarías? ¿qué elementos agregarías? ¿crees que en su estado actual cumple con los criterios de Tufte y Cairo que revisamos la clase anterior?\nPara finalizar la clase te presento la visualización inicial y la final, una junto a la otra, para ver en dónde comenzamos, dónde terminamos y cómo llegamos hasta aquí. También te sugiero revises y descargues el PDF de esta página, que es un acordeón donde se encuentran los gráficos y funciones más comunes. Más adelante revisaremos algunos de ellos pero es un recurso que vale la pena tener a la mano.\nEsto es todo para esta clase. ¡Nos vemos en la siguiente!\n\n\n\n\n\n\n\n\n\n\n\n4.2.1 Gráfico final\n\n# Valores de referencia para utilizar en la gráfica\nrefs <- c(round(min(df1$hwy),0),  # Valor mínimo = peor consumo\n          round(mean(df1$hwy),0), # Valor promedio\n          round(max(df1$hwy),0))  # Valor máximo = mejor consumo\n\n# Objeto con todos los pasos para llegar a la gráfica final\n# Inicializamos el espacio gráfico\nfinal.plot <- ggplot(data = df1, aes(x = displ, y = hwy,\n                                     colour = class)) +\n              # Gráfico de dispersión\n              geom_point() +\n              # Establecemos los títulos, subtítulos y un pie de foto\n              labs(x = 'Desplazamiento (l)',\n                   y = 'Consumo (mpg)',\n                   colour = 'Clase',\n                   title = 'Tamaño del motor y Rendimiento de combustible',\n                   subtitle = 'Consumo en carretera',\n                   caption = 'Datos: ggplot2::mpg'\n                   ) +\n              #Eliminamos la cuadrícula menor\n              theme(panel.grid.minor = element_blank(),\n                    #Eliminamos la cuadrícula mayor\n                    panel.grid.major = element_blank(),\n                    #Eliminamos el color de fondo\n                    panel.background = element_blank(),\n                    #Eliminamos las líneas de ejes\n                    axis.line = element_blank(),\n                    #Eliminamos el fondo de la leyenda\n                    legend.key = element_blank(),\n                    #Establecemos la rel. de aspecto\n                    aspect.ratio = 1/1.61,\n                    #Eliminamos las marcas de los ejes\n                    axis.ticks = element_blank(),\n                    #Cambiamos el tipo de letra\n                    text = element_text(family = 'Times',\n                                        colour = 'gray50')\n                    ) + \n              # Reducimos las divisiones del eje ex a 4 valores\n              scale_x_continuous(breaks = c(1.8, 2.5, 5, 7)) +\n              # Eliminamos las divisiones del eje y\n              scale_y_continuous(breaks = NULL) +\n              # Añadimos una línea roja en el peor consumo\n              geom_hline(yintercept = refs[1],\n                         colour = 'firebrick', alpha = 0.5, \n                         linetype = 'dashed') +\n              # Añadimos una línea gris en el consumo promedio\n              geom_hline(yintercept = refs[2],\n                         colour = 'lightslategrey', alpha = 0.5, \n                         linetype = 'dashed') +\n              # Añadimos una línea verde en el mejor consumo\n              geom_hline(yintercept = refs[3],\n                         colour = 'forestgreen', alpha = 0.5,\n                         linetype = 'dashed') +\n              # Etiqueta del peor consumo\n              annotate('text', x = 1.3, y = refs[1]+1,\n                       label = as.character(refs[1]),\n                       colour = 'firebrick') +\n              #Etiqueta del consumo promedio\n              annotate('text', x = 1.3, y = refs[2]+1,\n                       label = as.character(refs[2]),\n                       colour = 'lightslategrey') +\n              # Etiqueta del mejor consumo\n              annotate('text', x = 1.3, y = refs[3]+1,\n                       label = as.character(refs[3]),\n                       colour = 'forestgreen') \n              \nfinal.plot"
  },
  {
    "objectID": "c04_ggplot2.html#extras",
    "href": "c04_ggplot2.html#extras",
    "title": "4  Principios de visualización de datos y ggplot2",
    "section": "4.3 Extras",
    "text": "4.3 Extras\nAunque estas modificaciones no necesariamente forman parte del proceso necesario para la visualización que era de nuestro interés, sí que son rutinarias, por lo que vale la pena echarles un ojo.\n\n4.3.1 Colores de puntos\nModificar los colores de los puntos. Podemos utilizar la función randomColor(n) de la librería con el mismo nombre. Esta función solamente recibe el número de colores que queremos y los generará de manera aleatoria:\n\naleat <- randomcoloR::randomColor(7)\nfinal.plot + scale_color_manual(name = \"Clase\", values = aleat)\n\n\n\n\nPodemos también especificar una paleta predefinida, utilizando la capa scale_color_brewer():\n\nfinal.plot + scale_color_brewer(type = \"seq\", palette = \"Paired\")\n\n\n\n\nOtra opción es directamente pasar un vector con los nombres de los colores que sean de nuestro interés:\n\ncolor_names <- c(\"red\", \"blue\", \"yellow\", \"black\",\n                 \"dodgerblue\", \"pink\", \"gray\")\nfinal.plot + scale_color_manual(name = \"Clase\", values = color_names)\n\n\n\n\n\n\n4.3.2 Tamaño de los puntos\nPara modificar el tamaño de los puntos solamente hay que agregar el argumento size a la capa geom_point, en el cuál indicaremos qué tamaños tomarán los puntos. Puede ser un solo valor:\n\nfinal.plot + geom_point(size = 0.1)\n\n\n\n\nO también a partir de una columna de la base de datos (dividida entre 5 para no obtener únicamente “manchas”):\n\nfinal.plot + geom_point(size = df1$hwy/5)\n\n\n\n\n\n\n4.3.3 Tipografías y Exportación de gráficos\nEl manejo de las tipografías en R es un poco especial, por ello usualmente recomiendo generar el gráfico en R, exportarlo como PDF (cairo_pdf(\"filename.pdf\", width, height, family)) y agregar las cursivas donde sea necesario; sin embargo, un paquete que puede resultar especialmente útil es ggtext. Este añade un nuevo “elemento” de texto que recibe formato Markdown (element_markdown()); es decir, podemos agregar itálicas o negritas. Para poder utilizarlo, sin embargo, es necesario modificar ligeramente nuestros datos de antemano. Para facilitarnos las cosas agregaremos una nueva columna a df1 que contenga las clases en itálicas y extraeremos los valores únicos (algo más eficiente sería hacerlo al revés, pero es más lógico de esta manera):\n\ndf1$clase <- paste0(\"*\",df1$class,\"*\")\nclases <- unique(df1$clase)\n\nFinalmente lo agregaremos a la gráfica. ¡OJO! Es necesario modificar el tema para que entienda el formato markdown:\n\nif(!require(ggtext)) {install.packages(\"ggtext\", dependencies = T)}\n\nLoading required package: ggtext\n\nfinal.plot + scale_color_discrete(name = \"Clase\",labels = clases) +\n             theme(legend.text = ggtext::element_markdown())\n\n\n\n\nCon este elemento podemos modificar también fracciones de cualquier texto de nuestra gráfica, por ejemplo carretera en negritas:\n\nfinal.plot + labs(subtitle = \"Consumo en **carretera**\") +\n             theme(plot.subtitle = ggtext::element_markdown())\n\n\n\n\nMezclando ambas modificaciones:\n\nfinal.plot + scale_color_discrete(name = \"Clase\",labels = clases) +\n             labs(subtitle = \"Consumo en **carretera**\") +\n             theme(plot.subtitle = ggtext::element_markdown(),\n                   legend.text = ggtext::element_markdown())"
  },
  {
    "objectID": "c04_ggplot2.html#introducción-a-ggplot2",
    "href": "c04_ggplot2.html#introducción-a-ggplot2",
    "title": "4  Principios de visualización de datos y ggplot2",
    "section": "4.2 Introducción a ggplot2",
    "text": "4.2 Introducción a ggplot2\nAntes de comenzar una visualización es necesario saber qué queremos responder con ella. En este caso, utilizaremos la base de datos mpg incluída en ggplot2. El primer paso es, entonces, conocer la información que contiene. Para ello guardaremos la base en una variable que llamaremos df1:\n\nlibrary(ggplot2)\n\ndf1 <- ggplot2::mpg\ndf1\n\n\n\n  \n\n\n\nUna manera rápida de tener una idea de cómo está dispuesta una base de datos es utilizando la función head(var). Esta nos mostrará solo las primeras instancias (renglones) del data.frame que estemos analizando. En la tabla inferior podemos ver que se trata de una base de datos sobre automóviles y que las columnas representan: el fabricante, el modelo, el desplazamiento de combustible (litros), el año del modelo, el número de cilindros, el tipo de transmisión, el tipo de tracción, los consumos en ciudad y autopista (en millas por galón, mpg), el tipo de combustible que utilizan y la clase a la que pertenencen. También nos plantearemos el objetivo de eliminar la mayor cantidad de elementos posibles hasta solo tener el esqueleto y de ahí agregar algunos elementos que favorezcan la interpretación.\n\nhead(df1)\n\n\n\n  \n\n\n\n\n4.2.1 ggplot() + ...\nA partir de esta información podemos tratar de responder si existe una relación apreciable entre el consumo de combustible (por ejemplo en autopista) y el desplazamiento del motor, considerando la clase del vehículo. Para atender a esta pregunta utilizaremos un gráfico de dispersión, con el desplazamiento en el eje x, el consumo en el eje y y la clase indicada por los colores de los puntos. Ahora que tenemos claro qué queremos visualizar y cómo lo vamos a visualizar podemos empezar a graficar. El primer paso es inicializar el espacio de graficado con la función ggplot() y pasarle los parámetros estéticos utilizando la función aes(x, y, colour). Es importante mencionar que en este momento aparecerá únicamente el espacio de graficado en blanco. Esto es normal, ya que únicamente definimos el “qué”, pero no el “cómo”.\n\nggplot(data = df1, aes(x = displ, y = cty, colour = class))\n\n\n\n\nYa que inicializamos el espacio gráfico podemos agregar la información que nos interesa. Para facilitar la construcción paso a paso y evitar el repetir código innecesariamente podemos almacenar la gráfica completa en una variable (por ejemplo plot2) e ir añadiendo capas (operador +) posteriormente. Para ver un gráfico guardado en una variable simplemente hay que llamar a esa variable. La primera capa que agregaremos será la que indicará el tipo de gráfico que deseamos (nombrados como geom_*), en este caso un gráfico de dispersión:\n\nplot1 <- ggplot(data = df1, aes(x = displ, y = hwy, colour = class)) +\n         geom_point()\nplot1 # Imprime el gráfico\n\n\n\n\nAhora sí tenemos la información que necesitamos y podríamos comenzar a describir el gráfico, pero en realidad hay demasiados elementos que son innecesarios y otros que son poco informativos en su estado actual (etiquetas de ejes), entonces trabajemos uno por uno. Para modificar las etiquetas de los ejes podemos utilizar las funciones xlab() y ylab() como capas separadas; sin embargo, podemos modificar todas las etiquetas y títulos en un mismo paso utilizando la función labs(title, x, y, caption, colour, ...).\n\nplot2 <- plot1 + labs(x = \"Desplazamiento (l)\",\n                      y = 'Consumo (mpg)',\n                      colour = 'Clase',\n                      title = \n                        'Tamaño del motor y Rendimiento de combustible',\n                      subtitle = 'Consumo en carretera',\n                      caption = 'Datos: ggplot2::mpg')\nplot2\n\n\n\n\n\n\n4.2.2 Tema de ggplot2\nAhora que está claro cuáles son las variables que estamos mostrando podemos empezar a modificar la estética. Recordemos que debemos mantener la relación datos/tinta lo más alta posible, y uno de los elementos más prevalentes del gráfico es el fondo gris con todo y cuadrículas. Para modificar esos elementos tenemos que modificar el “tema” de la gráfica, que no es otra cosa mas que utilizar una función que nos permita modificar en una sola línea la estética general del gráfico. Los temas se encuentran señalados con el nombre theme_*. Probemos con theme_minimal():\n\nplot2 + theme_minimal()\n\n\n\n\nLogramos eliminar el fondo gris y de paso las “espinas” (líneas de los ejes) y ahora el gráfico está en mucho mejor condición para ser presentado; sin embargo aún podemos ir más lejos. El objetivo de esta gráfica no es ver los detalles precisos de la información, si no extraer la información más relevante, por lo que la cuadrícula es un elemento que no aporta nada a la visualización. Para retirarla utilizaremos la función theme(), la cual permite modificar el aspecto de todos los elementos del gráfico. En realidad, las funciones theme_*() son aplicaciones de theme() con diferentes valores por defecto, por lo que podemos replicar el efecto de theme_minimal() e incluir otras modificaciones. Otra función muy útil para este procedimiento es la función element_blank(), la cual le indica a ggplot2 que no debe mostrar ese elemento. Otra cuestión importante que debemos de considerar es la relación de aspecto. Debido a que esta puede modificar enormemente la percepción de los datos, su selección no es algo trivial. En general, la proporción áurea (1:1.61) es un buen punto de partida y en series de tiempo es la proporción que menos deforma los datos. Una proporción cuadrada tiene sentido únicamente en aquellos casos en los que ambos ejes tengan la misma magnitud de variación y procuraremos que el eje más largo sea aquel con la variación más pequeña. En este caso, la variación del eje y (5 a 45) es mucho mayor que la del eje x (1.5 a 7), por lo cual una proporción cuadrada no sería una buena alternativa. En su lugar, utilicemos la proporción áurea. El último elemento que eliminaremos aquí son las marcas de los ejes, ya que realmente no aportan demasiada información.\n\nplot2 <- plot2 + \n         # Eliminamos la cuadrícula menor\n         theme(panel.grid.minor = element_blank(),\n               # Eliminamos la cuadrícula mayor\n               panel.grid.major = element_blank(),\n               # Eliminamos el color de fondo\n               panel.background = element_blank(),\n               # Eliminamos las líneas de los ejes\n               axis.line = element_blank(),\n               # Eliminamos la leyenda\n               legend.key = element_blank(),\n               # Cambiamos la relación de aspecto\n               aspect.ratio = 1/1.61,\n               # Eliminamos las marcas de los ejes\n               axis.ticks = element_blank()\n                       )\nplot2\n\n\n\n\n\n\n4.2.3 Personalizar los ejes\nAhora que nos deshicimos del fondo, la cuadrícula y las líneas y marcas de los ejes podemos trabajar en los valores de los ejes. Una de las mejores maneras de hacerlo es utilizando las funciones scale_x_*() o scale_y_*(), sustituyendo el * por continuous o discrete dependiendo del tipo de variable con el que estemos trabajando. En este caso, eliminaremos por completo las marcas del eje y y dejaremos únicamente los desplazamientos más comunes en el eje x.\n\nplot2 <- plot2 + scale_x_continuous(breaks = c(1.8, 2.5, 5, 7)) +\n                 scale_y_continuous(breaks = NULL)\nplot2\n\n\n\n\n\n\n4.2.4 Añadir líneas de referencia\nAhora que nos deshicimos de los valores del eje la gráfica ya no es entendible debido a que no sabemos cuál es la orientación o la escala de los datos. Una alternativa es añadir un par de líneas de referencia. Esto lo haremos con la función geom_hline(), la cual nos permite añadir líneas horizontales a través de todo el gráfico que cruzan al eje y en una posición que nosotros determinamos:\n\n# Valores de referencia como el mínimo, la media y\n# el máximo de los consumos\n\nrefs <- c(round(min(df1$hwy),0),\n          round(mean(df1$hwy),0),\n          round(max(df1$hwy),0))\n\n# Líneas de referencia, una verde para el mejor consumo,\n# una gris para el consumo promedio y una roja para el peor consumo\nplot2 <- plot2 + geom_hline(yintercept = refs[1],\n                            colour = 'firebrick', alpha = 0.5,\n                            linetype = 'dashed') +\n                 geom_hline(yintercept = refs[2],\n                            colour = 'lightslategrey', alpha = 0.5,\n                            linetype = 'dashed') +\n                 geom_hline(yintercept = refs[3],\n                            colour = 'forestgreen', alpha = 0.5,\n                            linetype = 'dashed')\nplot2\n\n\n\n\nAhora el gráifico ya cuenta nuevamente con un sentido de dimensión, pero no tenemos los valores de referencia, entonces habrá que poner esas anotaciones con la función geom_text(), utilizando como valores de posición en y los mismos que las líneas de referencia + un pequeño valor:\n\n# Líneas de referencia con los mismos colores\nplot2 <- plot2 + annotate('text', x = 1.3, y = refs[1]+1, \n                          label = as.character(refs[1]),\n                          colour = 'firebrick') +\n                 annotate('text', x = 1.3, y = refs[2]+1,\n                          label = as.character(refs[2]),\n                          colour = 'lightslategrey') +\n                 annotate('text', x = 1.3, y = refs[3]+1,\n                          label = as.character(refs[3]),\n                          colour = 'forestgreen')\nplot2\n\n\n\n\nCon esta última modificación terminamos de explorar algunas de las funciones más básicas e importantes para personalizar los elementos que más impactan en una visualización, pero antes de terminar de discutir este punto me gustaría terminar el objetivo que nos propusimos al inicio de sacar información de la gráfica. En general, existe una tendencia a que el consumo de combustible incremente conforme incrementa el desplazamiento, lo cual es de esperarse, ya que el desplazamiento es una medida de el volumen máximo de combustible que puede entrar al motor en un momento dado; sin embargo, podemos también observar que, independientemente del desplazamiento, las SUVs y pickups tienden a tener los peores rendimientos de combustible, mientras que los subcompactos tienden al otro extremo. Podemos también analizar a los vehículos de dos plazas y ver que aún cuando tienen desplazamientos altos, sus rendimientos son mejores que los de las SUVs.\n\n\n4.2.5 Conclusión y ejercicio\nEn cuanto a la parte visual, se podría argumentar que esta visualización final no es tan precisa como la primera, que algún elemento podría embellecerse, o que podriamos eliminar la leyenda y poner etiquetas de texto en algunos puntos para indicar las clases. Todos estos argumentos y muchos otros serían válidos ya que la estética es algo subjetivo; sin embargo, las decisiones que tomemos deberán estar en función del medio de distribución de la visualización (no es lo mismo una página web que en un medio impreso, por ejemplo) y sobre todo del público objetivo. Esta visualización en particular funciona para los fines didácticos que tenía en mente, es adecuada para una presentación de resultados de manera electrónica como este video, pero no es una visualización adecuada para una publicación científica. Tomando eso en cuenta, te sugiero hacer el ejercicio de transformarla para cumplir con ese objetivo, ¿qué elementos quitarías? ¿qué elementos cambiarías? ¿qué elementos agregarías? ¿crees que en su estado actual cumple con los criterios de Tufte y Cairo que revisamos la clase anterior?\nPara finalizar la clase te presento la visualización inicial y la final, una junto a la otra, para ver en dónde comenzamos, dónde terminamos y cómo llegamos hasta aquí. También te sugiero revises y descargues el PDF de esta página, que es un acordeón donde se encuentran los gráficos y funciones más comunes. Más adelante revisaremos algunos de ellos pero es un recurso que vale la pena tener a la mano.\nEsto es todo para esta clase. ¡Nos vemos en la siguiente!\n\n\n\n\n\n\n\n\n\n\n\n4.2.5.1 Gráfico final\n\n# Valores de referencia para utilizar en la gráfica\nrefs <- c(round(min(df1$hwy),0),  # Valor mínimo = peor consumo\n          round(mean(df1$hwy),0), # Valor promedio\n          round(max(df1$hwy),0))  # Valor máximo = mejor consumo\n\n# Objeto con todos los pasos para llegar a la gráfica final\n# Inicializamos el espacio gráfico\nfinal.plot <- ggplot(data = df1, aes(x = displ, y = hwy,\n                                     colour = class)) +\n              # Gráfico de dispersión\n              geom_point() +\n              # Establecemos los títulos, subtítulos y un pie de foto\n              labs(x = 'Desplazamiento (l)',\n                   y = 'Consumo (mpg)',\n                   colour = 'Clase',\n                   title = 'Tamaño del motor y Rendimiento de combustible',\n                   subtitle = 'Consumo en carretera',\n                   caption = 'Datos: ggplot2::mpg'\n                   ) +\n              #Eliminamos la cuadrícula menor\n              theme(panel.grid.minor = element_blank(),\n                    #Eliminamos la cuadrícula mayor\n                    panel.grid.major = element_blank(),\n                    #Eliminamos el color de fondo\n                    panel.background = element_blank(),\n                    #Eliminamos las líneas de ejes\n                    axis.line = element_blank(),\n                    #Eliminamos el fondo de la leyenda\n                    legend.key = element_blank(),\n                    #Establecemos la rel. de aspecto\n                    aspect.ratio = 1/1.61,\n                    #Eliminamos las marcas de los ejes\n                    axis.ticks = element_blank(),\n                    #Cambiamos el tipo de letra\n                    text = element_text(family = 'Times',\n                                        colour = 'gray50')\n                    ) + \n              # Reducimos las divisiones del eje ex a 4 valores\n              scale_x_continuous(breaks = c(1.8, 2.5, 5, 7)) +\n              # Eliminamos las divisiones del eje y\n              scale_y_continuous(breaks = NULL) +\n              # Añadimos una línea roja en el peor consumo\n              geom_hline(yintercept = refs[1],\n                         colour = 'firebrick', alpha = 0.5, \n                         linetype = 'dashed') +\n              # Añadimos una línea gris en el consumo promedio\n              geom_hline(yintercept = refs[2],\n                         colour = 'lightslategrey', alpha = 0.5, \n                         linetype = 'dashed') +\n              # Añadimos una línea verde en el mejor consumo\n              geom_hline(yintercept = refs[3],\n                         colour = 'forestgreen', alpha = 0.5,\n                         linetype = 'dashed') +\n              # Etiqueta del peor consumo\n              annotate('text', x = 1.3, y = refs[1]+1,\n                       label = as.character(refs[1]),\n                       colour = 'firebrick') +\n              #Etiqueta del consumo promedio\n              annotate('text', x = 1.3, y = refs[2]+1,\n                       label = as.character(refs[2]),\n                       colour = 'lightslategrey') +\n              # Etiqueta del mejor consumo\n              annotate('text', x = 1.3, y = refs[3]+1,\n                       label = as.character(refs[3]),\n                       colour = 'forestgreen') \n              \nfinal.plot\n\n\n\n\n\n\n\n4.2.6 Extras\nAunque estas modificaciones no necesariamente forman parte del proceso necesario para la visualización que era de nuestro interés, sí que son rutinarias, por lo que vale la pena echarles un ojo.\n\n4.2.6.1 Colores de puntos\nModificar los colores de los puntos. Podemos utilizar la función randomColor(n) de la librería con el mismo nombre. Esta función solamente recibe el número de colores que queremos y los generará de manera aleatoria:\n\naleat <- randomcoloR::randomColor(7)\nfinal.plot + scale_color_manual(name = \"Clase\", values = aleat)\n\n\n\n\nPodemos también especificar una paleta predefinida, utilizando la capa scale_color_brewer():\n\nfinal.plot + scale_color_brewer(type = \"seq\", palette = \"Paired\")\n\n\n\n\nOtra opción es directamente pasar un vector con los nombres de los colores que sean de nuestro interés:\n\ncolor_names <- c(\"red\", \"blue\", \"yellow\", \"black\",\n                 \"dodgerblue\", \"pink\", \"gray\")\nfinal.plot + scale_color_manual(name = \"Clase\", values = color_names)\n\n\n\n\n\n\n4.2.6.2 Tamaño de los puntos\nPara modificar el tamaño de los puntos solamente hay que agregar el argumento size a la capa geom_point, en el cuál indicaremos qué tamaños tomarán los puntos. Puede ser un solo valor:\n\nfinal.plot + geom_point(size = 0.1)\n\n\n\n\nO también a partir de una columna de la base de datos (dividida entre 5 para no obtener únicamente “manchas”):\n\nfinal.plot + geom_point(size = df1$hwy/5)\n\n\n\n\n\n\n4.2.6.3 Tipografías y Exportación de gráficos\nEl manejo de las tipografías en R es un poco especial, por ello usualmente recomiendo generar el gráfico en R, exportarlo como PDF (cairo_pdf(\"filename.pdf\", width, height, family)) y agregar las cursivas donde sea necesario; sin embargo, un paquete que puede resultar especialmente útil es ggtext. Este añade un nuevo “elemento” de texto que recibe formato Markdown (element_markdown()); es decir, podemos agregar itálicas o negritas. Para poder utilizarlo, sin embargo, es necesario modificar ligeramente nuestros datos de antemano. Para facilitarnos las cosas agregaremos una nueva columna a df1 que contenga las clases en itálicas y extraeremos los valores únicos (algo más eficiente sería hacerlo al revés, pero es más lógico de esta manera):\n\ndf1$clase <- paste0(\"*\",df1$class,\"*\")\nclases <- unique(df1$clase)\n\nFinalmente lo agregaremos a la gráfica. ¡OJO! Es necesario modificar el tema para que entienda el formato markdown:\n\nif(!require(ggtext)) {install.packages(\"ggtext\", dependencies = T)}\n\nLoading required package: ggtext\n\nfinal.plot + scale_color_discrete(name = \"Clase\",labels = clases) +\n             theme(legend.text = ggtext::element_markdown())\n\n\n\n\nCon este elemento podemos modificar también fracciones de cualquier texto de nuestra gráfica, por ejemplo carretera en negritas:\n\nfinal.plot + labs(subtitle = \"Consumo en **carretera**\") +\n             theme(plot.subtitle = ggtext::element_markdown())\n\n\n\n\nMezclando ambas modificaciones:\n\nfinal.plot + scale_color_discrete(name = \"Clase\",labels = clases) +\n             labs(subtitle = \"Consumo en **carretera**\") +\n             theme(plot.subtitle = ggtext::element_markdown(),\n                   legend.text = ggtext::element_markdown())"
  }
]